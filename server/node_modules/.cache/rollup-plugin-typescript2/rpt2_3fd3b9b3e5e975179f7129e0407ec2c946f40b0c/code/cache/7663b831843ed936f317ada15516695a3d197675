{"code":"import { Element } from '@sidetree/element';\r\nimport { blockchain } from './ethereum';\r\nconst config = {\r\n    batchingIntervalInSeconds: 0,\r\n    contentAddressableStoreServiceUri: '',\r\n    didMethodName: '',\r\n    maxConcurrentDownloads: 0,\r\n    observingIntervalInSeconds: 0,\r\n    mongoDbConnectionString: '',\r\n    databaseName: '',\r\n};\r\nconst protocolVersions = [];\r\nconst sidetree = new Element(config, protocolVersions, blockchain);\r\nsidetree.initialize();\r\nconst operations = sidetree.handleOperationRequest;\r\nconst readDID = sidetree.handleResolveRequest;\r\nconst getSideTreeVersion = sidetree.handleGetVersionRequest;\r\nexport { operations, readDID, getSideTreeVersion };\r\n//# sourceMappingURL=sidetree.js.map","references":["/Users/johnhopkins/transmute_tech_challenge/server/node_modules/@sidetree/element/dist/index.d.ts","/Users/johnhopkins/transmute_tech_challenge/server/src/controllers/ethereum.ts","/Users/johnhopkins/transmute_tech_challenge/server/node_modules/web3/types/index.d.ts"],"map":"{\"version\":3,\"file\":\"sidetree.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/controllers/sidetree.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAC,OAAO,EAAC,MAAM,mBAAmB,CAAA;AACzC,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAA;AAEvC,MAAM,MAAM,GAAG;IACX,yBAAyB,EAAE,CAAC;IAC5B,iCAAiC,EAAE,EAAE;IACrC,aAAa,EAAE,EAAE;IACjB,sBAAsB,EAAE,CAAC;IACzB,0BAA0B,EAAE,CAAC;IAC7B,uBAAuB,EAAE,EAAE;IAC3B,YAAY,EAAE,EAAE;CACnB,CAAA;AACD,MAAM,gBAAgB,GAAG,EAAE,CAAA;AAG3B,MAAM,QAAQ,GAAG,IAAI,OAAO,CAAC,MAAM,EAAE,gBAAgB,EAAE,UAAU,CAAE,CAAA;AAEnE,QAAQ,CAAC,UAAU,EAAE,CAAA;AAErB,MAAM,UAAU,GAAG,QAAQ,CAAC,sBAAsB,CAAA;AAClD,MAAM,OAAO,GAAG,QAAQ,CAAC,oBAAoB,CAAA;AAC7C,MAAM,kBAAkB,GAAG,QAAQ,CAAC,uBAAuB,CAAA;AAE3D,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAA\"}","dts":{"name":"/Users/johnhopkins/transmute_tech_challenge/server/controllers/sidetree.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\ndeclare const operations: (request: Buffer) => Promise<import(\"@sidetree/common\").ResponseModel>;\r\ndeclare const readDID: (didOrDidDocument: string) => Promise<import(\"@sidetree/common\").ResponseModel>;\r\ndeclare const getSideTreeVersion: () => Promise<import(\"@sidetree/common\").ResponseModel>;\r\nexport { operations, readDID, getSideTreeVersion };\r\n"}}
