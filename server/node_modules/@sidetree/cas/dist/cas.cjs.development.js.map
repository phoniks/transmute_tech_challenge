{"version":3,"file":"cas.cjs.development.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/IpfsCas.ts","../src/IpfsCasWithCache.ts","../src/MockCas.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FetchResultCode,\n  ICas,\n  FetchResult,\n  ServiceVersionModel,\n} from '@sidetree/common';\nimport ipfsClient from 'ipfs-http-client';\nimport concat from 'it-concat';\nconst { version } = require('../package.json');\n\nexport default class CasIpfs implements ICas {\n  private ipfs: any;\n\n  constructor(multiaddr: string) {\n    const parts = multiaddr.split('/');\n\n    if (parts[1] === 'ip4') {\n      this.ipfs = ipfsClient({ host: parts[2], port: parts[4] });\n    }\n\n    if (parts[1] === 'dns4') {\n      this.ipfs = ipfsClient({\n        host: parts[2],\n        port: parts[4],\n        protocol: parts[5],\n      });\n    }\n  }\n  public async initialize(): Promise<void> {\n    return;\n  }\n\n  public async close(): Promise<void> {\n    return;\n  }\n\n  public getServiceVersion: () => ServiceVersionModel = () => {\n    return {\n      name: 'ipfs',\n      version,\n    };\n  };\n\n  public async write(content: Buffer): Promise<string> {\n    const source = await this.ipfs.add(content);\n    const file = await source.next();\n    return file.value.path;\n  }\n\n  public async read(address: string): Promise<FetchResult> {\n    try {\n      const source = this.ipfs.get(address, { timeout: 2000 });\n      const file = await source.next();\n      const bufferList: any = await concat(file.value.content);\n      const content = bufferList.copy();\n      if (content) {\n        return {\n          code: FetchResultCode.Success,\n          content,\n        };\n      }\n      return {\n        code: FetchResultCode.NotFound,\n      };\n    } catch (e) {\n      if (e.name === 'TimeoutError') {\n        return {\n          code: FetchResultCode.NotFound,\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FetchResult,\n  FetchResultCode,\n  ServiceVersionModel,\n} from '@sidetree/common';\nimport IpfsCas from './IpfsCas';\nimport { MongoDbCasCache } from '@sidetree/db';\nconst { version } = require('../package.json');\n\nexport default class IpfsCasWithCache extends IpfsCas {\n  private cache: MongoDbCasCache;\n\n  constructor(casUrl: string, dbUrl: string, dbName: string) {\n    super(casUrl);\n    this.cache = new MongoDbCasCache(dbUrl, dbName);\n  }\n\n  public async initialize(): Promise<void> {\n    await this.cache.initialize();\n  }\n\n  public async close(): Promise<void> {\n    await this.cache.close();\n  }\n\n  public async write(content: Buffer): Promise<string> {\n    const hash = await super.write(content);\n    await this.cache.write(hash, content);\n    return hash;\n  }\n\n  public async read(address: string): Promise<FetchResult> {\n    const cachedResult = await this.cache.read(address);\n    if (cachedResult.code === FetchResultCode.Success) {\n      console.info(`Returning cached content for address ${address}`);\n      return cachedResult;\n    }\n    const result = await super.read(address);\n    if (result.code === FetchResultCode.Success) {\n      console.info(`Caching read result for ${address}`);\n      await this.cache.write(address, result.content!);\n    }\n    return result;\n  }\n\n  public getServiceVersion: () => ServiceVersionModel = () => {\n    return {\n      name: 'ipfs-with-cache',\n      version,\n    };\n  };\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FetchResultCode,\n  ICas,\n  FetchResult,\n  ServiceVersionModel,\n} from '@sidetree/common';\nimport Unixfs from 'ipfs-unixfs';\nimport { DAGNode } from 'ipld-dag-pb';\nconst { version } = require('../package.json');\n\n/**\n * Implementation of a CAS class for testing.\n * Simply using a hash map to store all the content by hash.\n */\nexport default class MockCas implements ICas {\n  /** A Map that stores the given content. */\n  private storage: Map<string, Buffer> = new Map();\n\n  /** Time taken in seconds for each mock fetch. */\n  private mockSecondsTakenForEachCasFetch = 0;\n\n  constructor(mockSecondsTakenForEachCasFetch?: number) {\n    if (mockSecondsTakenForEachCasFetch !== undefined) {\n      this.mockSecondsTakenForEachCasFetch = mockSecondsTakenForEachCasFetch;\n    }\n  }\n\n  async getServiceVersion(): Promise<ServiceVersionModel> {\n    return {\n      name: 'mock-cas',\n      version,\n    };\n  }\n\n  async initialize(): Promise<void> {\n    return;\n  }\n\n  async close(): Promise<void> {\n    return;\n  }\n\n  /**\n   * Gets the address that can be used to access the given content.\n   */\n  public static async getAddress(content: Buffer): Promise<string> {\n    const unixFs = new Unixfs('file', content);\n    const marshaled = unixFs.marshal();\n    const dagNode = new DAGNode(marshaled);\n    const dagLink = await dagNode.toDAGLink({\n      cidVersion: 0,\n    });\n    return dagLink.Hash.toString();\n  }\n\n  public async write(content: Buffer): Promise<string> {\n    const encodedHash = await MockCas.getAddress(content);\n    this.storage.set(encodedHash, content);\n    return encodedHash;\n  }\n\n  public async read(address: string): Promise<FetchResult> {\n    // Wait for configured time before returning.\n    await new Promise((resolve) =>\n      setTimeout(resolve, this.mockSecondsTakenForEachCasFetch * 1000)\n    );\n    const content = this.storage.get(address);\n    if (content === undefined) {\n      return {\n        code: FetchResultCode.NotFound,\n      };\n    }\n\n    return {\n      code: FetchResultCode.Success,\n      content,\n    };\n  }\n}\n"],"names":["require","version","CasIpfs","multiaddr","name","parts","split","ipfs","ipfsClient","host","port","protocol","initialize","close","write","content","add","source","next","file","value","path","read","address","get","timeout","concat","bufferList","copy","code","FetchResultCode","Success","NotFound","e","IpfsCasWithCache","casUrl","dbUrl","dbName","cache","MongoDbCasCache","hash","cachedResult","console","info","result","IpfsCas","MockCas","mockSecondsTakenForEachCasFetch","Map","undefined","getServiceVersion","getAddress","unixFs","Unixfs","marshaled","marshal","dagNode","DAGNode","toDAGLink","cidVersion","dagLink","Hash","toString","encodedHash","storage","set","Promise","resolve","setTimeout"],"mappings":";;;;;;;;;;;;;AAAA;AAmKA;AACO,MAAM,eAAe,iBAAiB,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,YAAY,CAAC;AA4D/J;AACO,MAAM,oBAAoB,iBAAiB,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,aAAa,KAAK,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC,IAAI,iBAAiB,CAAC;AA+UxL;AACA;AACO,SAAS,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE;AACtC,CAAC,IAAI;AACL,EAAE,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC;AACtB,EAAE,CAAC,MAAM,CAAC,EAAE;AACZ,EAAE,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;AACpB,EAAE;AACF,CAAC,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;AAC5B,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;AACtC,EAAE;AACF,CAAC,OAAO,MAAM,CAAC;AACf;;4BCjiBoBA,OAAO,CAAC,iBAAD;IAAnBC,mBAAAA;;IAEaC;AAGnB,mBAAYC,SAAZ;AAuBO,0BAAA,GAA+C;AACpD,aAAO;AACLC,QAAAA,IAAI,EAAE,MADD;AAELH,QAAAA,OAAO,EAAPA;AAFK,OAAP;AAID,KALM;;AAtBL,QAAMI,KAAK,GAAGF,SAAS,CAACG,KAAV,CAAgB,GAAhB,CAAd;;AAEA,QAAID,KAAK,CAAC,CAAD,CAAL,KAAa,KAAjB,EAAwB;AACtB,WAAKE,IAAL,GAAYC,UAAU,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,KAAK,CAAC,CAAD,CAAb;AAAkBK,QAAAA,IAAI,EAAEL,KAAK,CAAC,CAAD;AAA7B,OAAD,CAAtB;AACD;;AAED,QAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,MAAjB,EAAyB;AACvB,WAAKE,IAAL,GAAYC,UAAU,CAAC;AACrBC,QAAAA,IAAI,EAAEJ,KAAK,CAAC,CAAD,CADU;AAErBK,QAAAA,IAAI,EAAEL,KAAK,CAAC,CAAD,CAFU;AAGrBM,QAAAA,QAAQ,EAAEN,KAAK,CAAC,CAAD;AAHM,OAAD,CAAtB;AAKD;AACF;;;;SACYO;AACX;AACD;;SAEYC;AACX;AACD;;SASYC,uBAAMC;;mBACI;;6BAAA,OAAKR,IAAL,CAAUS,GAAV,CAAcD,OAAd,kBAAfE;+BACaA,MAAM,CAACC,IAAP,mBAAbC;AACN,iBAAOA,IAAI,CAACC,KAAL,CAAWC,IAAlB;;;AACD;;;;;SAEYC,qBAAKC;;mBAEC;;gDADb;AACF,YAAMN,MAAM,GAAG,OAAKV,IAAL,CAAUiB,GAAV,CAAcD,OAAd,EAAuB;AAAEE,UAAAA,OAAO,EAAE;AAAX,SAAvB,CAAf;;AADE,+BAEiBR,MAAM,CAACC,IAAP,EAFjB,iBAEIC,IAFJ;AAAA,iCAG4BO,MAAM,CAACP,IAAI,CAACC,KAAL,CAAWL,OAAZ,CAHlC,iBAGIY,UAHJ;AAIF,gBAAMZ,OAAO,GAAGY,UAAU,CAACC,IAAX,EAAhB;AAJE,mBAKEb,OALF,GAMO;AACLc,cAAAA,IAAI,EAAEC,sBAAe,CAACC,OADjB;AAELhB,cAAAA,OAAO,EAAPA;AAFK,aANP,GAWK;AACLc,cAAAA,IAAI,EAAEC,sBAAe,CAACE;AADjB,aAXL;AAAA;AAAA;AAcH,mBAAQC,GAAG;AAAA,YACNA,CAAC,CAAC7B,IAAF,KAAW,cADL;AAER,iBAAO;AACLyB,YAAAA,IAAI,EAAEC,sBAAe,CAACE;AADjB,WAAP;AAFQ;AAMR,gBAAMC,CAAN;AANQ;AAQX;AACF;;;;;;;;;;;;;;8BClEiBjC,OAAO,CAAC,iBAAD;IAAnBC,uBAAAA;;IAEaiC;;;AAGnB,4BAAYC,MAAZ,EAA4BC,KAA5B,EAA2CC,MAA3C;;;AACE,gCAAMF,MAAN;;AAgCK,2BAAA,GAA+C;AACpD,aAAO;AACL/B,QAAAA,IAAI,EAAE,iBADD;AAELH,QAAAA,OAAO,EAAPA;AAFK,OAAP;AAID,KALM;;AA/BL,UAAKqC,KAAL,GAAa,IAAIC,kBAAJ,CAAoBH,KAApB,EAA2BC,MAA3B,CAAb;;AACD;;;;SAEYzB;;mBACL;;6BAAA,OAAK0B,KAAL,CAAW1B,UAAX;AACP;;;;;SAEYC;;mBACL;;6BAAA,OAAKyB,KAAL,CAAWzB,KAAX;AACP;;;;;SAEYC,uBAAMC;;;;gDACQD,mBAAMC,yBAAzByB;+BACA,OAAKF,KAAL,CAAWxB,KAAX,CAAiB0B,IAAjB,EAAuBzB,OAAvB;AACN,iBAAOyB,IAAP;;;AACD;;;;;SAEYlB,qBAAKC;;mBACW;;6BAAA,OAAKe,KAAL,CAAWhB,IAAX,CAAgBC,OAAhB,kBAArBkB;AACN,YAAIA,YAAY,CAACZ,IAAb,KAAsBC,sBAAe,CAACC,OAA1C,EAAmD;AACjDW,UAAAA,OAAO,CAACC,IAAR,2CAAqDpB,OAArD;AACA,iBAAOkB,YAAP;AACD;;kDAC0BnB,kBAAKC,yBAA1BqB;;gBACFA,MAAM,CAACf,IAAP,KAAgBC,sBAAe,CAACC;AAClCW,cAAAA,OAAO,CAACC,IAAR,8BAAwCpB,OAAxC;qCACM,OAAKe,KAAL,CAAWxB,KAAX,CAAiBS,OAAjB,EAA0BqB,MAAM,CAAC7B,OAAjC;;;;;AAER,mBAAO6B,MAAP;eAAOA;;;AACR;;;;;;EAlC2CC;;AC5B9C;;;;;;;;;;;;;;;;;;AAmBA;8BAQoB7C,OAAO,CAAC,iBAAD;IAAnBC,uBAAAA;AAER;;;;;;IAIqB6C;AAOnB,mBAAYC,+BAAZ;AANA;AACQ,gBAAA,GAA+B,IAAIC,GAAJ,EAA/B;AAER;;AACQ,wCAAA,GAAkC,CAAlC;;AAGN,QAAID,+BAA+B,KAAKE,SAAxC,EAAmD;AACjD,WAAKF,+BAAL,GAAuCA,+BAAvC;AACD;AACF;;;;SAEKG;;AACJ,6BAAO;AACL9C,QAAAA,IAAI,EAAE,UADD;AAELH,QAAAA,OAAO,EAAPA;AAFK,OAAP;AAID;;;;;SAEKW;AACJ;AACD;;SAEKC;AACJ;AACD;AAED;;;;;UAGoBsC,iCAAWpC;;AAC7B,UAAMqC,MAAM,GAAG,IAAIC,MAAJ,CAAW,MAAX,EAAmBtC,OAAnB,CAAf;AACA,UAAMuC,SAAS,GAAGF,MAAM,CAACG,OAAP,EAAlB;AACA,UAAMC,OAAO,GAAG,IAAIC,iBAAJ,CAAYH,SAAZ,CAAhB;6BACsBE,OAAO,CAACE,SAAR,CAAkB;AACtCC,QAAAA,UAAU,EAAE;AAD0B,OAAlB,kBAAhBC;AAGN,eAAOA,OAAO,CAACC,IAAR,CAAaC,QAAb,EAAP;;AACD;;;;;SAEYhD,uBAAMC;;mBAEjB;;6BAD0B+B,OAAO,CAACK,UAAR,CAAmBpC,OAAnB,kBAApBgD;AACN,eAAKC,OAAL,CAAaC,GAAb,CAAiBF,WAAjB,EAA8BhD,OAA9B;;AACA,eAAOgD,WAAP;;AACD;;;;;SAEYzC,qBAAKC;;mBAGM;;AAFtB;6BACM,IAAI2C,OAAJ,CAAY,UAACC,OAAD;AAAA,eAChBC,UAAU,CAACD,OAAD,EAAU,OAAKpB,+BAAL,GAAuC,IAAjD,CADM;AAAA,OAAZ;AAGN,YAAMhC,OAAO,GAAG,OAAKiD,OAAL,CAAaxC,GAAb,CAAiBD,OAAjB,CAAhB;;eACIR,OAAO,KAAKkC,YACP;AACLpB,UAAAA,IAAI,EAAEC,sBAAe,CAACE;AADjB,YAKF;AACLH,UAAAA,IAAI,EAAEC,sBAAe,CAACC,OADjB;AAELhB,UAAAA,OAAO,EAAPA;AAFK;;AAIR;;;;;;;;;;;;"}