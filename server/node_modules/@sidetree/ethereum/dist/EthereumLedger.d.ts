import { BlockchainTimeModel, IBlockchain, TransactionModel, ValueTimeLockModel, ServiceVersionModel } from '@sidetree/common';
import Web3 from 'web3';
import { ElementContract } from './types';
export default class EthereumLedger implements IBlockchain {
    web3: Web3;
    contractAddress?: string | undefined;
    private logger;
    anchorContract: any;
    instance: ElementContract | undefined;
    private cachedBlockchainTime;
    constructor(web3: Web3, contractAddress?: string | undefined, logger?: Console);
    initialize(): Promise<void>;
    getServiceVersion: () => ServiceVersionModel;
    private getInstance;
    _getTransactions: (fromBlock: number | string, toBlock: number | string, options?: {
        filter?: import("web3-eth-contract").Filter | undefined;
        omitTimestamp?: boolean | undefined;
    } | undefined) => Promise<TransactionModel[]>;
    extendSidetreeTransactionWithTimestamp: (transactions: TransactionModel[]) => Promise<TransactionModel[]>;
    read(sinceTransactionNumber?: number, transactionTimeHash?: string): Promise<{
        moreTransactions: boolean;
        transactions: TransactionModel[];
    }>;
    get approximateTime(): BlockchainTimeModel;
    getLatestTime(): Promise<BlockchainTimeModel>;
    write: (anchorString: string, _fee?: number) => Promise<void>;
    getFirstValidTransaction(_transactions: TransactionModel[]): Promise<TransactionModel | undefined>;
    getFee(_transactionTime: number): Promise<number>;
    getValueTimeLock(_lockIdentifier: string): Promise<ValueTimeLockModel | undefined>;
    getWriterValueTimeLock(): Promise<ValueTimeLockModel | undefined>;
}
