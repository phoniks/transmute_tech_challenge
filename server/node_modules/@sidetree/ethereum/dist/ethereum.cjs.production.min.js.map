{"version":3,"file":"ethereum.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/utils.ts","../src/EthereumLedger.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","/*\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TransactionModel, AnchoredDataSerializer } from '@sidetree/common';\nimport multihashes from 'multihashes';\nimport Web3 from 'web3';\nimport { EthereumBlock, ElementEventData } from './types';\n\nconst getAccounts = (web3: Web3): Promise<Array<string>> =>\n  new Promise((resolve, reject) => {\n    web3.eth.getAccounts((err: Error, accounts: string[]) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(accounts);\n    });\n  });\n\nconst bytes32EnodedMultihashToBase58EncodedMultihash = (\n  bytes32EncodedMultihash: string\n): string =>\n  multihashes.toB58String(\n    multihashes.fromHexString(\n      `1220${bytes32EncodedMultihash.replace('0x', '')}`\n    )\n  );\n\nconst base58EncodedMultihashToBytes32 = (\n  base58EncodedMultihash: string\n): string => {\n  return `0x${multihashes\n    .toHexString(multihashes.fromB58String(base58EncodedMultihash))\n    .substring(4)}`;\n};\n\nconst eventLogToSidetreeTransaction = (\n  log: ElementEventData\n): TransactionModel => {\n  const anchoredData = {\n    anchorFileHash: bytes32EnodedMultihashToBase58EncodedMultihash(\n      log.args.anchorFileHash\n    ),\n    numberOfOperations: Number.parseInt(log.args.numberOfOperations),\n  };\n  const anchorString = AnchoredDataSerializer.serialize(anchoredData);\n  return {\n    transactionNumber: log.args.transactionNumber.toNumber(),\n    transactionTime: log.blockNumber,\n    transactionHash: log.transactionHash,\n    transactionTimeHash: log.blockHash,\n    anchorString,\n    transactionFeePaid: 0,\n    normalizedTransactionFee: 0,\n    writer: 'writer',\n  };\n};\n\nconst getBlock = async (\n  web3: Web3,\n  blockHashOrBlockNumber: string | number\n): Promise<EthereumBlock> => {\n  const block: EthereumBlock = await new Promise((resolve, reject) => {\n    web3.eth.getBlock(\n      blockHashOrBlockNumber,\n      (err: Error, b: EthereumBlock) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(b);\n      }\n    );\n  });\n  return block;\n};\n\nconst getBlockchainTime = async (\n  web3: Web3,\n  blockHashOrBlockNumber: string | number\n): Promise<string | number | null> => {\n  const block: EthereumBlock = await getBlock(web3, blockHashOrBlockNumber);\n  if (block) {\n    return block.timestamp;\n  }\n  return null;\n};\n\nconst extendSidetreeTransactionWithTimestamp = async (\n  web3: Web3,\n  txns: TransactionModel[]\n): Promise<TransactionModel[]> => {\n  return Promise.all(\n    txns.map(async (txn) => {\n      const timestamp = await getBlockchainTime(web3, txn.transactionTime);\n      if (typeof timestamp === 'number') {\n        return {\n          ...txn,\n          transactionTimestamp: timestamp,\n        };\n      }\n      return txn;\n    })\n  );\n};\n\nexport default {\n  base58EncodedMultihashToBytes32,\n  bytes32EnodedMultihashToBase58EncodedMultihash,\n  eventLogToSidetreeTransaction,\n  extendSidetreeTransactionWithTimestamp,\n  getAccounts,\n  getBlock,\n  getBlockchainTime,\n};\n","/*\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport utils from './utils';\nimport {\n  BlockchainTimeModel,\n  IBlockchain,\n  TransactionModel,\n  AnchoredDataSerializer,\n  ValueTimeLockModel,\n  ServiceVersionModel,\n} from '@sidetree/common';\nimport Web3 from 'web3';\nimport {\n  ElementContract,\n  ElementEventData,\n  EthereumBlock,\n  EthereumFilter,\n} from './types';\n\nconst { version } = require('../package.json');\nconst contract = require('@truffle/contract');\nconst anchorContractArtifact = require('../build/contracts/SimpleSidetreeAnchor.json');\n\nexport default class EthereumLedger implements IBlockchain {\n  private logger: Console;\n  public anchorContract: any;\n  public instance: ElementContract | undefined;\n  private cachedBlockchainTime: BlockchainTimeModel = { hash: '', time: 0 };\n\n  constructor(\n    public web3: Web3,\n    public contractAddress?: string,\n    logger?: Console\n  ) {\n    this.logger = logger || console;\n    this.anchorContract = contract(anchorContractArtifact);\n    this.anchorContract.setProvider(this.web3.currentProvider);\n    this.anchorContract.defaults({\n      gasPrice: '100000000000',\n    });\n  }\n\n  public async initialize(): Promise<void> {\n    // Set primary address\n    const [primaryAddress] = await utils.getAccounts(this.web3);\n    // Set instance\n    if (!this.contractAddress) {\n      this.instance = await this.anchorContract.new({\n        from: primaryAddress,\n      });\n      this.contractAddress = this.instance!.address;\n      this.logger.info(\n        `Creating new Element contract at address ${this.contractAddress}`\n      );\n    } else {\n      this.logger.info(\n        `Using Element contract at address ${this.contractAddress}`\n      );\n    }\n    this.instance = await this.anchorContract.at(this.contractAddress);\n    // Refresh cached block time\n    await this.getLatestTime();\n  }\n\n  public getServiceVersion: () => ServiceVersionModel = () => {\n    return {\n      name: 'ethereum',\n      version,\n    };\n  };\n\n  private getInstance(): ElementContract {\n    if (!this.instance) {\n      throw new Error(\n        'Contract instance is undefined. Call .initialize() first'\n      );\n    }\n    return this.instance;\n  }\n\n  public _getTransactions = async (\n    fromBlock: number | string,\n    toBlock: number | string,\n    options?: { filter?: EthereumFilter; omitTimestamp?: boolean }\n  ): Promise<TransactionModel[]> => {\n    const instance = await this.getInstance();\n    const logs = await instance.getPastEvents('Anchor', {\n      fromBlock,\n      toBlock: toBlock || 'latest',\n      filter: (options && options.filter) || undefined,\n    });\n    const txns = logs.map((log) =>\n      utils.eventLogToSidetreeTransaction(log as ElementEventData)\n    );\n    if (options && options.omitTimestamp) {\n      return txns;\n    }\n    return utils.extendSidetreeTransactionWithTimestamp(this.web3, txns);\n  };\n\n  public extendSidetreeTransactionWithTimestamp = async (\n    transactions: TransactionModel[]\n  ): Promise<TransactionModel[]> => {\n    return utils.extendSidetreeTransactionWithTimestamp(\n      this.web3,\n      transactions\n    );\n  };\n\n  public async read(\n    sinceTransactionNumber?: number,\n    transactionTimeHash?: string\n  ): Promise<{ moreTransactions: boolean; transactions: TransactionModel[] }> {\n    const options = {\n      omitTimestamp: true,\n    };\n    let transactions: TransactionModel[];\n    // if(sinceTransactionNumber) does not work because 0 evaluates to false\n    // but 0 is a valid value of sinceTransactionNumber...\n    if (sinceTransactionNumber !== undefined) {\n      const sinceTransaction = await this._getTransactions(0, 'latest', {\n        ...options,\n        filter: { transactionNumber: [sinceTransactionNumber] },\n      });\n      if (sinceTransaction.length === 1) {\n        transactions = await this._getTransactions(\n          sinceTransaction[0].transactionTime,\n          'latest',\n          options\n        );\n      } else {\n        transactions = [];\n      }\n    } else if (transactionTimeHash) {\n      const block = await utils.getBlock(this.web3, transactionTimeHash);\n      if (block && block.number) {\n        transactions = await this._getTransactions(\n          block.number,\n          block.number,\n          options\n        );\n      } else {\n        transactions = [];\n      }\n    } else {\n      transactions = await this._getTransactions(0, 'latest', options);\n    }\n    return {\n      moreTransactions: false,\n      transactions,\n    };\n  }\n\n  public get approximateTime(): BlockchainTimeModel {\n    return this.cachedBlockchainTime;\n  }\n\n  public async getLatestTime(): Promise<BlockchainTimeModel> {\n    const block: EthereumBlock = await utils.getBlock(this.web3, 'latest');\n    const blockchainTime: BlockchainTimeModel = {\n      time: block.number,\n      hash: block.hash,\n    };\n    this.cachedBlockchainTime = blockchainTime;\n    return blockchainTime;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public write = async (anchorString: string, _fee = 0): Promise<void> => {\n    const [from] = await utils.getAccounts(this.web3);\n    const instance = this.getInstance();\n    const {\n      anchorFileHash,\n      numberOfOperations,\n    } = AnchoredDataSerializer.deserialize(anchorString);\n    const bytes32AnchorFileHash = utils.base58EncodedMultihashToBytes32(\n      anchorFileHash\n    );\n    try {\n      const txn = await instance.anchorHash(\n        bytes32AnchorFileHash,\n        numberOfOperations,\n        {\n          from,\n        }\n      );\n      this.logger.info(\n        `Ethereum transaction successful: https://ropsten.etherscan.io/tx/${txn.tx}`\n      );\n    } catch (err) {\n      this.logger.error(err.message);\n    }\n  };\n\n  public async getFirstValidTransaction(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _transactions: TransactionModel[]\n  ): Promise<TransactionModel | undefined> {\n    return Promise.resolve(undefined);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getFee(_transactionTime: number): Promise<number> {\n    return Promise.resolve(0);\n  }\n\n  getValueTimeLock(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _lockIdentifier: string\n  ): Promise<ValueTimeLockModel | undefined> {\n    return Promise.resolve(undefined);\n  }\n\n  getWriterValueTimeLock(): Promise<ValueTimeLockModel | undefined> {\n    return Promise.resolve(undefined);\n  }\n}\n"],"names":["Symbol","iterator","asyncIterator","getBlock","web3","blockHashOrBlockNumber","Promise","resolve","reject","eth","err","b","txns","all","map","txn","block","timestamp","getBlockchainTime","transactionTime","transactionTimestamp","getAccounts","accounts","version","require","contract","anchorContractArtifact","contractAddress","logger","this","hash","time","name","fromBlock","toBlock","options","_this","getInstance","instance","getPastEvents","filter","undefined","logs","log","bytes32EncodedMultihash","anchoredData","anchorFileHash","args","multihashes","toB58String","fromHexString","replace","numberOfOperations","Number","parseInt","anchorString","AnchoredDataSerializer","serialize","transactionNumber","toNumber","blockNumber","transactionHash","transactionTimeHash","blockHash","transactionFeePaid","normalizedTransactionFee","writer","utils","omitTimestamp","transactions","_this2","_fee","_this3","from","deserialize","bytes32AnchorFileHash","toHexString","fromB58String","substring","body","recover","result","anchorHash","info","tx","e","then","error","message","console","anchorContract","setProvider","currentProvider","defaults","gasPrice","initialize","_this5","primaryAddress","at","getLatestTime","address","Error","read","sinceTransactionNumber","moreTransactions","_this7","_getTransactions","sinceTransaction","length","number","_this9","blockchainTime","cachedBlockchainTime","getFirstValidTransaction","_transactions","getFee","_transactionTime","getValueTimeLock","_lockIdentifier","getWriterValueTimeLock"],"mappings":"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"}