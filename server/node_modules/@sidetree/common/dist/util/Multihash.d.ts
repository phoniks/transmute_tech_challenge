/// <reference types="node" />
/**
 * Class that performs hashing operations using the multihash format.
 */
export default class Multihash {
    /**
     * Hashes the content using the hashing algorithm specified.
     * @param hashAlgorithmInMultihashCode The hashing algorithm to use. If not given, latest supported hashing algorithm will be used.
     */
    static hash(content: Buffer, hashAlgorithmInMultihashCode?: number): Buffer;
    /**
     * Canonicalize the given content, then multihashes the result using the lastest supported hash algorithm, then encodes the multihash.
     * Mainly used for testing purposes.
     */
    static canonicalizeThenHashThenEncode(content: object): string;
    /**
     * Hashes the content using the hashing algorithm specified then codes the multihash buffer.
     * @param hashAlgorithmInMultihashCode The hashing algorithm to use.
     */
    static hashThenEncode(content: Buffer, hashAlgorithmInMultihashCode: number): string;
    /**
     * Given a multihash, returns the code of the hash algorithm used.
     * @throws `SidetreeError` if hash algorithm used for the given multihash is unsupported.
     */
    static getHashAlgorithmCode(multihashBuffer: Buffer): number;
    /**
     * Verifies that the given hash is a multihash computed using the latest supported hash algorithm known to this version of code.
     * @throws `SidetreeError` if the given hash is not a multihash computed using the latest supported hash algorithm.
     */
    static verifyHashComputedUsingLatestSupportedAlgorithm(hash: Buffer): void;
    /**
     * Checks if the given hash is a multihash with the expected hashing algorithm.
     */
    static isComputedUsingHashAlgorithm(hash: Buffer, expectedHashAlgorithmInMultihashCode: number): boolean;
    /**
     * Verifies the given content against the given multihash.
     */
    static isValidHash(encodedContent: string | undefined, encodedMultihash: string): boolean;
    /**
     * Canonicalizes the given content object, then verifies the multihash against the canonicalized string as a UTF8 buffer.
     */
    static canonicalizeAndVerify(content: object | undefined, encodedMultihash: string): boolean;
    /**
     * Verifies the multihash against the content `Buffer`.
     */
    private static verify;
}
