/// <reference types="node" />
import { Config, ResponseModel, ProtocolVersionModel, IBlockchain } from '@sidetree/common';
import { OperationStore as MongoDbOperationStore, MongoDbTransactionStore } from '@sidetree/db';
/**
 * The core class that is instantiated when running a Sidetree node.
 */
export default class DidMethod {
    static readonly cachedBlockchainTimeRefreshInSeconds = 60;
    transactionStore: MongoDbTransactionStore;
    private unresolvableTransactionStore;
    operationStore: MongoDbOperationStore;
    private versionManager;
    blockchain: IBlockchain;
    private cas;
    private downloadManager;
    private observer;
    private batchScheduler;
    private resolver;
    private serviceInfo;
    constructor(config: Config, protocolVersions: ProtocolVersionModel[], blockchain: IBlockchain);
    /**
     * The initialization method that must be called before consumption of this core object.
     * The method starts the Observer and Batch Writer.
     */
    initialize(startObserver?: boolean, startBatchWriter?: boolean): Promise<void>;
    /**
     * The function that starts periodically anchoring operation batches to blockchain.
     */
    startPeriodicCachedBlockchainTimeRefresh: VoidFunction;
    triggerBatchWriting(): Promise<void>;
    triggerProcessTransactions(): Promise<void>;
    triggerBatchAndObserve(): Promise<void>;
    close(): Promise<void>;
    /**
     * Handles an operation request.
     */
    handleOperationRequest(request: Buffer): Promise<ResponseModel>;
    /**
     * Handles resolve operation.
     * @param didOrDidDocument Can either be:
     *   1. Fully qualified DID. e.g. 'did:sidetree:abc' or
     *   2. An encoded DID Document prefixed by the DID method name. e.g. 'did:sidetree:<encoded-DID-Document>'.
     */
    handleResolveRequest(didOrDidDocument: string): Promise<ResponseModel>;
    /**
     * Handles the get version request. It gets the versions from the dependent services
     * as well.
     */
    handleGetVersionRequest(): Promise<ResponseModel>;
}
