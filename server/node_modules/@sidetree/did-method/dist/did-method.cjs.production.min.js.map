{"version":3,"file":"did-method.cjs.production.min.js","sources":["../src/DidMethod.ts"],"sourcesContent":["/*\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Config,\n  ResponseModel,\n  ResponseStatus,\n  ProtocolVersionModel,\n  IBlockchain,\n} from '@sidetree/common';\nimport {\n  BatchScheduler,\n  DownloadManager,\n  Observer,\n  Resolver,\n  ServiceInfo,\n  VersionManager,\n} from '@sidetree/core';\nimport { IpfsCasWithCache as Cas } from '@sidetree/cas';\nimport {\n  OperationStore as MongoDbOperationStore,\n  MongoDbOperationQueue,\n  MongoDbTransactionStore,\n  MongoDbUnresolvableTransactionStore,\n} from '@sidetree/db';\n\n/**\n * The core class that is instantiated when running a Sidetree node.\n */\nexport default class DidMethod {\n  static readonly cachedBlockchainTimeRefreshInSeconds = 60;\n  public transactionStore: MongoDbTransactionStore;\n  private unresolvableTransactionStore: MongoDbUnresolvableTransactionStore;\n  public operationStore: MongoDbOperationStore;\n  private versionManager: VersionManager;\n  public blockchain: IBlockchain;\n  private cas: Cas;\n  private downloadManager: DownloadManager;\n  private observer: Observer;\n  private batchScheduler: BatchScheduler;\n  private resolver: Resolver;\n  private serviceInfo: ServiceInfo;\n\n  public constructor(\n    config: Config,\n    protocolVersions: ProtocolVersionModel[],\n    blockchain: IBlockchain\n  ) {\n    // Component dependency construction & injection.\n    this.versionManager = new VersionManager(config, protocolVersions); // `VersionManager` is first constructed component.\n    this.operationStore = new MongoDbOperationStore(\n      config.mongoDbConnectionString,\n      config.databaseName\n    );\n    this.blockchain = blockchain;\n    this.cas = new Cas(\n      config.contentAddressableStoreServiceUri,\n      config.mongoDbConnectionString,\n      config.databaseName\n    );\n    this.downloadManager = new DownloadManager(\n      config.maxConcurrentDownloads,\n      this.cas\n    );\n    this.resolver = new Resolver(this.versionManager, this.operationStore);\n    this.batchScheduler = new BatchScheduler(\n      this.versionManager,\n      this.blockchain,\n      config.batchingIntervalInSeconds\n    );\n    this.transactionStore = new MongoDbTransactionStore(\n      config.mongoDbConnectionString,\n      config.databaseName\n    );\n    this.unresolvableTransactionStore = new MongoDbUnresolvableTransactionStore(\n      config.mongoDbConnectionString,\n      config.databaseName\n    );\n    this.observer = new Observer(\n      this.versionManager,\n      this.blockchain,\n      config.maxConcurrentDownloads,\n      this.operationStore,\n      this.transactionStore,\n      this.unresolvableTransactionStore,\n      config.observingIntervalInSeconds\n    );\n\n    this.serviceInfo = new ServiceInfo('core');\n  }\n\n  /**\n   * The initialization method that must be called before consumption of this core object.\n   * The method starts the Observer and Batch Writer.\n   */\n  public async initialize(\n    startObserver = true,\n    startBatchWriter = true\n  ): Promise<void> {\n    await this.transactionStore.initialize();\n    await this.unresolvableTransactionStore.initialize();\n    await this.operationStore.initialize();\n    await this.blockchain.initialize();\n    await this.cas.initialize();\n    await this.versionManager.initialize(\n      this.blockchain,\n      this.cas,\n      this.downloadManager,\n      this.operationStore,\n      this.resolver,\n      this.transactionStore\n    ); // `VersionManager` is last initialized component.\n\n    if (startObserver) {\n      await this.observer.startPeriodicProcessing();\n    }\n\n    if (startBatchWriter) {\n      this.batchScheduler.startPeriodicBatchWriting();\n    }\n    this.startPeriodicCachedBlockchainTimeRefresh();\n    this.downloadManager.start();\n  }\n\n  /**\n   * The function that starts periodically anchoring operation batches to blockchain.\n   */\n  public startPeriodicCachedBlockchainTimeRefresh: VoidFunction = () => {\n    setInterval(\n      async () => this.blockchain.getLatestTime(),\n      DidMethod.cachedBlockchainTimeRefreshInSeconds * 1000\n    );\n  };\n\n  public async triggerBatchWriting(): Promise<void> {\n    await this.batchScheduler.writeOperationBatch();\n  }\n\n  public async triggerProcessTransactions(): Promise<void> {\n    // By passing true, we force the observer to wait for all transactions\n    // to be downloaded before returning. We need that for testing\n    await this.observer.refreshLastKnownTransaction();\n    await this.observer.processTransactions(true);\n  }\n\n  public async triggerBatchAndObserve(): Promise<void> {\n    await this.triggerBatchWriting();\n    await this.triggerProcessTransactions();\n  }\n\n  public async close(): Promise<void> {\n    const currentTime = this.blockchain.approximateTime;\n    const operationQueue = this.versionManager.getOperationQueue(\n      currentTime.time\n    );\n    if (operationQueue) {\n      await (operationQueue as MongoDbOperationQueue).close();\n    }\n    await this.transactionStore.close();\n    await this.unresolvableTransactionStore.close();\n    await this.operationStore.close();\n    await this.observer.stopPeriodicProcessing();\n    await this.cas.close();\n    this.batchScheduler.stopPeriodicBatchWriting();\n  }\n\n  /**\n   * Handles an operation request.\n   */\n  public async handleOperationRequest(request: Buffer): Promise<ResponseModel> {\n    const currentTime = this.blockchain.approximateTime;\n    const requestHandler = this.versionManager.getRequestHandler(\n      currentTime.time\n    );\n    const response = requestHandler.handleOperationRequest(request);\n    return response;\n  }\n\n  /**\n   * Handles resolve operation.\n   * @param didOrDidDocument Can either be:\n   *   1. Fully qualified DID. e.g. 'did:sidetree:abc' or\n   *   2. An encoded DID Document prefixed by the DID method name. e.g. 'did:sidetree:<encoded-DID-Document>'.\n   */\n  public async handleResolveRequest(\n    didOrDidDocument: string\n  ): Promise<ResponseModel> {\n    const currentTime = this.blockchain.approximateTime;\n    const requestHandler = this.versionManager.getRequestHandler(\n      currentTime.time\n    );\n    const response = requestHandler.handleResolveRequest(didOrDidDocument);\n    return response;\n  }\n\n  /**\n   * Handles the get version request. It gets the versions from the dependent services\n   * as well.\n   */\n  public async handleGetVersionRequest(): Promise<ResponseModel> {\n    const responses = [\n      this.serviceInfo.getServiceVersion(),\n      await this.blockchain.getServiceVersion(),\n      await this.cas.getServiceVersion(),\n    ];\n\n    return {\n      status: ResponseStatus.Succeeded,\n      body: JSON.stringify(responses),\n    };\n  }\n}\n"],"names":["DidMethod","config","protocolVersions","blockchain","setInterval","_this","getLatestTime","cachedBlockchainTimeRefreshInSeconds","versionManager","VersionManager","operationStore","MongoDbOperationStore","mongoDbConnectionString","databaseName","cas","Cas","contentAddressableStoreServiceUri","downloadManager","DownloadManager","maxConcurrentDownloads","this","resolver","Resolver","batchScheduler","BatchScheduler","batchingIntervalInSeconds","transactionStore","MongoDbTransactionStore","unresolvableTransactionStore","MongoDbUnresolvableTransactionStore","observer","Observer","observingIntervalInSeconds","serviceInfo","ServiceInfo","initialize","startObserver","startBatchWriter","_this3","startPeriodicBatchWriting","startPeriodicCachedBlockchainTimeRefresh","start","startPeriodicProcessing","triggerBatchWriting","writeOperationBatch","triggerProcessTransactions","_this7","refreshLastKnownTransaction","processTransactions","triggerBatchAndObserve","_this9","close","_this11","stopPeriodicProcessing","stopPeriodicBatchWriting","operationQueue","getOperationQueue","approximateTime","time","handleOperationRequest","request","response","getRequestHandler","handleResolveRequest","didOrDidDocument","handleGetVersionRequest","_this17","getServiceVersion","status","ResponseStatus","Succeeded","body","JSON","stringify"],"mappings":"uLAwCqBA,wBAejBC,EACAC,EACAC,4DAiF8D,WAC9DC,mDACcC,EAAKF,WAAWG,sDACqB,IAAjDN,EAAUO,4CAjFPC,eAAiB,IAAIC,iBAAeR,EAAQC,QAC5CQ,eAAiB,IAAIC,iBACxBV,EAAOW,wBACPX,EAAOY,mBAEJV,WAAaA,OACbW,IAAM,IAAIC,mBACbd,EAAOe,kCACPf,EAAOW,wBACPX,EAAOY,mBAEJI,gBAAkB,IAAIC,kBACzBjB,EAAOkB,uBACPC,KAAKN,UAEFO,SAAW,IAAIC,WAASF,KAAKZ,eAAgBY,KAAKV,qBAClDa,eAAiB,IAAIC,iBACxBJ,KAAKZ,eACLY,KAAKjB,WACLF,EAAOwB,gCAEJC,iBAAmB,IAAIC,0BAC1B1B,EAAOW,wBACPX,EAAOY,mBAEJe,6BAA+B,IAAIC,sCACtC5B,EAAOW,wBACPX,EAAOY,mBAEJiB,SAAW,IAAIC,WAClBX,KAAKZ,eACLY,KAAKjB,WACLF,EAAOkB,uBACPC,KAAKV,eACLU,KAAKM,iBACLN,KAAKQ,6BACL3B,EAAO+B,iCAGJC,YAAc,IAAIC,cAAY,mCAOxBC,oBACXC,EACAC,YADAD,IAAAA,GAAgB,YAChBC,IAAAA,GAAmB,aAEbjB,4BAAAkB,EAAKZ,iBAAiBS,sDACtBG,EAAKV,6BAA6BO,sDAClCG,EAAK5B,eAAeyB,sDACpBG,EAAKnC,WAAWgC,sDAChBG,EAAKxB,IAAIqB,sDACTG,EAAK9B,eAAe2B,WACxBG,EAAKnC,WACLmC,EAAKxB,IACLwB,EAAKrB,gBACLqB,EAAK5B,eACL4B,EAAKjB,SACLiB,EAAKZ,iDAOHW,KACGd,eAAegB,8BAEjBC,6CACAvB,gBAAgBwB,4BARjBL,yBACIE,EAAKR,SAASY,0IAoBXC,0DACLvB,KAAKG,eAAeqB,kFAGfC,gDAGLzB,4BAAA0B,EAAKhB,SAASiB,uEACdD,EAAKhB,SAASkB,qBAAoB,kEAG7BC,4CACL7B,4BAAA8B,EAAKP,+DACLO,EAAKL,4FAGAM,6DAQLC,EAAK1B,iBAAiByB,iDACtBC,EAAKxB,6BAA6BuB,iDAClCC,EAAK1C,eAAeyC,iDACpBC,EAAKtB,SAASuB,kEACdD,EAAKtC,IAAIqC,4BACV5B,eAAe+B,6CAZAlC,KACdmC,EAAiBH,EAAK5C,eAAegD,kBADvBJ,EAAKjD,WAAWsD,gBAEtBC,sBAEVH,yBACKA,EAAyCJ,uHAavCQ,gCAAuBC,WAK5BC,EAJczC,KACQZ,eAAesD,kBADvB1C,KAAKjB,WAAWsD,gBAEtBC,MAEkBC,uBAAuBC,0BAChDC,yCASIE,8BACXC,WAMMH,EAJczC,KACQZ,eAAesD,kBADvB1C,KAAKjB,WAAWsD,gBAEtBC,MAEkBK,qBAAqBC,0BAC9CH,yCAOII,6CAET7C,OAAA8C,EAAKjC,YAAYkC,2CACXD,EAAK/D,WAAWgE,8DAChBD,EAAKpD,IAAIqD,6CAGV,CACLC,OAAQC,iBAAeC,UACvBC,KAAMC,KAAKC,UARK,yDA1KJzE,uCAAuC"}