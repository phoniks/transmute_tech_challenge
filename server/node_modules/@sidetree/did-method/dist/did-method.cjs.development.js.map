{"version":3,"file":"did-method.cjs.development.js","sources":["../src/DidMethod.ts"],"sourcesContent":["/*\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Config,\n  ResponseModel,\n  ResponseStatus,\n  ProtocolVersionModel,\n  IBlockchain,\n} from '@sidetree/common';\nimport {\n  BatchScheduler,\n  DownloadManager,\n  Observer,\n  Resolver,\n  ServiceInfo,\n  VersionManager,\n} from '@sidetree/core';\nimport { IpfsCasWithCache as Cas } from '@sidetree/cas';\nimport {\n  OperationStore as MongoDbOperationStore,\n  MongoDbOperationQueue,\n  MongoDbTransactionStore,\n  MongoDbUnresolvableTransactionStore,\n} from '@sidetree/db';\n\n/**\n * The core class that is instantiated when running a Sidetree node.\n */\nexport default class DidMethod {\n  static readonly cachedBlockchainTimeRefreshInSeconds = 60;\n  public transactionStore: MongoDbTransactionStore;\n  private unresolvableTransactionStore: MongoDbUnresolvableTransactionStore;\n  public operationStore: MongoDbOperationStore;\n  private versionManager: VersionManager;\n  public blockchain: IBlockchain;\n  private cas: Cas;\n  private downloadManager: DownloadManager;\n  private observer: Observer;\n  private batchScheduler: BatchScheduler;\n  private resolver: Resolver;\n  private serviceInfo: ServiceInfo;\n\n  public constructor(\n    config: Config,\n    protocolVersions: ProtocolVersionModel[],\n    blockchain: IBlockchain\n  ) {\n    // Component dependency construction & injection.\n    this.versionManager = new VersionManager(config, protocolVersions); // `VersionManager` is first constructed component.\n    this.operationStore = new MongoDbOperationStore(\n      config.mongoDbConnectionString,\n      config.databaseName\n    );\n    this.blockchain = blockchain;\n    this.cas = new Cas(\n      config.contentAddressableStoreServiceUri,\n      config.mongoDbConnectionString,\n      config.databaseName\n    );\n    this.downloadManager = new DownloadManager(\n      config.maxConcurrentDownloads,\n      this.cas\n    );\n    this.resolver = new Resolver(this.versionManager, this.operationStore);\n    this.batchScheduler = new BatchScheduler(\n      this.versionManager,\n      this.blockchain,\n      config.batchingIntervalInSeconds\n    );\n    this.transactionStore = new MongoDbTransactionStore(\n      config.mongoDbConnectionString,\n      config.databaseName\n    );\n    this.unresolvableTransactionStore = new MongoDbUnresolvableTransactionStore(\n      config.mongoDbConnectionString,\n      config.databaseName\n    );\n    this.observer = new Observer(\n      this.versionManager,\n      this.blockchain,\n      config.maxConcurrentDownloads,\n      this.operationStore,\n      this.transactionStore,\n      this.unresolvableTransactionStore,\n      config.observingIntervalInSeconds\n    );\n\n    this.serviceInfo = new ServiceInfo('core');\n  }\n\n  /**\n   * The initialization method that must be called before consumption of this core object.\n   * The method starts the Observer and Batch Writer.\n   */\n  public async initialize(\n    startObserver = true,\n    startBatchWriter = true\n  ): Promise<void> {\n    await this.transactionStore.initialize();\n    await this.unresolvableTransactionStore.initialize();\n    await this.operationStore.initialize();\n    await this.blockchain.initialize();\n    await this.cas.initialize();\n    await this.versionManager.initialize(\n      this.blockchain,\n      this.cas,\n      this.downloadManager,\n      this.operationStore,\n      this.resolver,\n      this.transactionStore\n    ); // `VersionManager` is last initialized component.\n\n    if (startObserver) {\n      await this.observer.startPeriodicProcessing();\n    }\n\n    if (startBatchWriter) {\n      this.batchScheduler.startPeriodicBatchWriting();\n    }\n    this.startPeriodicCachedBlockchainTimeRefresh();\n    this.downloadManager.start();\n  }\n\n  /**\n   * The function that starts periodically anchoring operation batches to blockchain.\n   */\n  public startPeriodicCachedBlockchainTimeRefresh: VoidFunction = () => {\n    setInterval(\n      async () => this.blockchain.getLatestTime(),\n      DidMethod.cachedBlockchainTimeRefreshInSeconds * 1000\n    );\n  };\n\n  public async triggerBatchWriting(): Promise<void> {\n    await this.batchScheduler.writeOperationBatch();\n  }\n\n  public async triggerProcessTransactions(): Promise<void> {\n    // By passing true, we force the observer to wait for all transactions\n    // to be downloaded before returning. We need that for testing\n    await this.observer.refreshLastKnownTransaction();\n    await this.observer.processTransactions(true);\n  }\n\n  public async triggerBatchAndObserve(): Promise<void> {\n    await this.triggerBatchWriting();\n    await this.triggerProcessTransactions();\n  }\n\n  public async close(): Promise<void> {\n    const currentTime = this.blockchain.approximateTime;\n    const operationQueue = this.versionManager.getOperationQueue(\n      currentTime.time\n    );\n    if (operationQueue) {\n      await (operationQueue as MongoDbOperationQueue).close();\n    }\n    await this.transactionStore.close();\n    await this.unresolvableTransactionStore.close();\n    await this.operationStore.close();\n    await this.observer.stopPeriodicProcessing();\n    await this.cas.close();\n    this.batchScheduler.stopPeriodicBatchWriting();\n  }\n\n  /**\n   * Handles an operation request.\n   */\n  public async handleOperationRequest(request: Buffer): Promise<ResponseModel> {\n    const currentTime = this.blockchain.approximateTime;\n    const requestHandler = this.versionManager.getRequestHandler(\n      currentTime.time\n    );\n    const response = requestHandler.handleOperationRequest(request);\n    return response;\n  }\n\n  /**\n   * Handles resolve operation.\n   * @param didOrDidDocument Can either be:\n   *   1. Fully qualified DID. e.g. 'did:sidetree:abc' or\n   *   2. An encoded DID Document prefixed by the DID method name. e.g. 'did:sidetree:<encoded-DID-Document>'.\n   */\n  public async handleResolveRequest(\n    didOrDidDocument: string\n  ): Promise<ResponseModel> {\n    const currentTime = this.blockchain.approximateTime;\n    const requestHandler = this.versionManager.getRequestHandler(\n      currentTime.time\n    );\n    const response = requestHandler.handleResolveRequest(didOrDidDocument);\n    return response;\n  }\n\n  /**\n   * Handles the get version request. It gets the versions from the dependent services\n   * as well.\n   */\n  public async handleGetVersionRequest(): Promise<ResponseModel> {\n    const responses = [\n      this.serviceInfo.getServiceVersion(),\n      await this.blockchain.getServiceVersion(),\n      await this.cas.getServiceVersion(),\n    ];\n\n    return {\n      status: ResponseStatus.Succeeded,\n      body: JSON.stringify(responses),\n    };\n  }\n}\n"],"names":["DidMethod","config","protocolVersions","blockchain","setInterval","getLatestTime","cachedBlockchainTimeRefreshInSeconds","versionManager","VersionManager","operationStore","MongoDbOperationStore","mongoDbConnectionString","databaseName","cas","Cas","contentAddressableStoreServiceUri","downloadManager","DownloadManager","maxConcurrentDownloads","resolver","Resolver","batchScheduler","BatchScheduler","batchingIntervalInSeconds","transactionStore","MongoDbTransactionStore","unresolvableTransactionStore","MongoDbUnresolvableTransactionStore","observer","Observer","observingIntervalInSeconds","serviceInfo","ServiceInfo","initialize","startObserver","startBatchWriter","startPeriodicBatchWriting","startPeriodicCachedBlockchainTimeRefresh","start","startPeriodicProcessing","triggerBatchWriting","writeOperationBatch","triggerProcessTransactions","refreshLastKnownTransaction","processTransactions","triggerBatchAndObserve","close","stopPeriodicProcessing","stopPeriodicBatchWriting","currentTime","approximateTime","operationQueue","getOperationQueue","time","handleOperationRequest","request","requestHandler","getRequestHandler","response","handleResolveRequest","didOrDidDocument","handleGetVersionRequest","getServiceVersion","responses","status","ResponseStatus","Succeeded","body","JSON","stringify"],"mappings":"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"}