{"version":3,"file":"ledger.esm.js","sources":["../src/MockLedger.ts","../src/__tests__/testSuite.ts"],"sourcesContent":["/*\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  BlockchainTimeModel,\n  IBlockchain,\n  ServiceVersionModel,\n  TransactionModel,\n  ValueTimeLockModel,\n} from '@sidetree/common';\nconst { version } = require('../package.json');\n\n/**\n * Mock Blockchain class for testing.\n */\nexport default class MockLedger implements IBlockchain {\n  async getServiceVersion(): Promise<ServiceVersionModel> {\n    return {\n      name: 'mock-ledger',\n      version,\n    };\n  }\n  initialize(): Promise<void> {\n    return Promise.resolve();\n  }\n  getFee(_transactionTime: number): Promise<number> {\n    throw new Error('Method not implemented.');\n  }\n\n  getValueTimeLock(\n    _lockIdentifier: string\n  ): Promise<ValueTimeLockModel | undefined> {\n    throw new Error('Method not implemented.');\n  }\n\n  getWriterValueTimeLock(): Promise<ValueTimeLockModel | undefined> {\n    throw new Error('Method not implemented.');\n  }\n\n  /** Stores each hash given in write() method. */\n  hashes: [string][] = [];\n\n  public async write(anchorString: string, _fee = 0): Promise<void> {\n    this.hashes.push([anchorString]);\n  }\n\n  public async read(\n    sinceTransactionNumber?: number,\n    _transactionTimeHash?: string\n  ): Promise<{ moreTransactions: boolean; transactions: TransactionModel[] }> {\n    let transactions: TransactionModel[] = this.hashes.map((hash, index) => ({\n      transactionNumber: index,\n      transactionTime: index,\n      transactionHash: hash[0],\n      transactionTimeHash: hash[0],\n      anchorString: hash[0],\n      writer: 'writer',\n      transactionFeePaid: 0,\n      normalizedTransactionFee: 0,\n    }));\n    if (sinceTransactionNumber) {\n      transactions = transactions.filter(\n        (t) => t.transactionNumber >= sinceTransactionNumber\n      );\n    } else if (_transactionTimeHash) {\n      transactions = transactions.filter(\n        (t) => t.transactionTimeHash === _transactionTimeHash\n      );\n    }\n\n    return {\n      moreTransactions: false,\n      transactions: transactions,\n    };\n  }\n\n  public async getFirstValidTransaction(\n    _transactions: TransactionModel[]\n  ): Promise<TransactionModel | undefined> {\n    return undefined;\n  }\n\n  private latestTime?: BlockchainTimeModel = {\n    time: 0,\n    hash: '',\n  };\n\n  public getLatestTime = (): Promise<BlockchainTimeModel> => {\n    this.latestTime = {\n      time: 500000,\n      hash: 'dummyHash',\n    };\n    return Promise.resolve(this.latestTime);\n  };\n\n  public get approximateTime(): BlockchainTimeModel {\n    return this.latestTime!;\n  }\n  /**\n   * Hardcodes the latest time to be returned.\n   */\n  public setLatestTime(time: BlockchainTimeModel): void {\n    this.latestTime = time;\n  }\n}\n","/*\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IBlockchain } from '@sidetree/common';\nimport { filesystem } from '@sidetree/test-vectors';\n\nconst { anchorString, anchorString2, anchorString3 } = filesystem.anchorFile;\n\njest.setTimeout(10 * 1000);\n\nconst testSuite = (ledger: IBlockchain): void => {\n  describe(ledger.constructor.name, () => {\n    beforeAll(async () => {\n      await ledger.initialize();\n    });\n\n    describe('getServiceVersion', () => {\n      it('should get service version', async () => {\n        const serviceVersion = await ledger.getServiceVersion();\n        expect(serviceVersion).toBeDefined();\n        expect(serviceVersion.name).toBeDefined();\n        expect(serviceVersion.version).toBeDefined();\n      });\n    });\n\n    describe('write', () => {\n      it('should write to the ledger', async () => {\n        await ledger.write(anchorString, 0);\n      });\n    });\n\n    describe('getApproximateTime', () => {\n      it('should get latest cached blockchain time', async () => {\n        const realTime = await (ledger as any).getLatestTime();\n        const cachedTime = await ledger.approximateTime;\n        expect(cachedTime.time).toBe(realTime.time);\n        expect(cachedTime.hash).toBe(realTime.hash);\n      });\n    });\n\n    describe('read', () => {\n      let transactionTimeHash: string;\n      let sinceTransactionNumber: number;\n\n      it('should get all transactions', async () => {\n        const readResult = await ledger.read();\n        expect(readResult.moreTransactions).toBeFalsy();\n        expect(readResult.transactions).toHaveLength(1);\n        expect(readResult.transactions[0].transactionNumber).toBe(0);\n        expect(readResult.transactions[0].transactionTime).toBeDefined();\n        expect(readResult.transactions[0].transactionTimeHash).toBeDefined();\n        expect(readResult.transactions[0].anchorString).toBe(anchorString);\n        expect(readResult.transactions[0].writer).toBeDefined();\n        transactionTimeHash = readResult.transactions[0].transactionTimeHash;\n\n        await ledger.write(anchorString2, 0);\n        const readResult2 = await ledger.read();\n        expect(readResult2.moreTransactions).toBeFalsy();\n        expect(readResult2.transactions).toHaveLength(2);\n        expect(readResult2.transactions[0].anchorString).toBe(anchorString);\n        expect(readResult2.transactions[1].anchorString).toBe(anchorString2);\n        sinceTransactionNumber = readResult2.transactions[1].transactionNumber;\n      });\n\n      it('should get a specific transaction', async () => {\n        const readResult = await ledger.read(undefined, transactionTimeHash);\n        expect(readResult.moreTransactions).toBeFalsy();\n        expect(readResult.transactions).toHaveLength(1);\n        expect(readResult.transactions[0].transactionTimeHash).toBe(\n          transactionTimeHash\n        );\n        expect(readResult.transactions[0].anchorString).toBe(anchorString);\n      });\n\n      it('should get all transactions since a block', async () => {\n        await ledger.write(anchorString3, 0);\n        const readResult = await ledger.read(sinceTransactionNumber);\n        expect(readResult.moreTransactions).toBeFalsy();\n        expect(readResult.transactions).toHaveLength(2);\n        expect(readResult.transactions[0].transactionNumber).toBe(\n          sinceTransactionNumber\n        );\n        expect(readResult.transactions[1].transactionNumber).toBe(\n          sinceTransactionNumber + 1\n        );\n        expect(readResult.transactions[0].anchorString).toBe(anchorString2);\n        expect(readResult.transactions[1].anchorString).toBe(anchorString3);\n      });\n\n      it('should return no transaction if the requested transactionNumber doesnt exist', async () => {\n        const readResult = await ledger.read(3);\n        expect(readResult.moreTransactions).toBeFalsy();\n        expect(readResult.transactions).toHaveLength(0);\n      });\n\n      it('should return no transaction if the requested transactionTimeHash doesnt exist', async () => {\n        const readResult = await ledger.read(undefined, '0x123');\n        expect(readResult.moreTransactions).toBeFalsy();\n        expect(readResult.transactions).toHaveLength(0);\n      });\n    });\n  });\n};\n\n// eslint-disable-next-line jest/no-export\nexport default testSuite;\n"],"names":["require","version","MockLedger","time","hash","latestTime","Promise","resolve","getServiceVersion","name","initialize","getFee","_transactionTime","Error","getValueTimeLock","_lockIdentifier","getWriterValueTimeLock","write","anchorString","_fee","hashes","push","read","sinceTransactionNumber","_transactionTimeHash","transactions","map","index","transactionNumber","transactionTime","transactionHash","transactionTimeHash","writer","transactionFeePaid","normalizedTransactionFee","filter","t","moreTransactions","getFirstValidTransaction","_transactions","undefined","setLatestTime","filesystem","anchorFile","anchorString2","anchorString3","jest","setTimeout","testSuite","ledger","describe","constructor","beforeAll","it","serviceVersion","expect","toBeDefined","getLatestTime","realTime","approximateTime","cachedTime","toBe","readResult","toBeFalsy","toHaveLength","readResult2"],"mappings":"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"}