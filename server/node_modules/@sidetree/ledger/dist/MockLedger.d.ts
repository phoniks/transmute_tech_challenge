import { BlockchainTimeModel, IBlockchain, ServiceVersionModel, TransactionModel, ValueTimeLockModel } from '@sidetree/common';
/**
 * Mock Blockchain class for testing.
 */
export default class MockLedger implements IBlockchain {
    getServiceVersion(): Promise<ServiceVersionModel>;
    initialize(): Promise<void>;
    getFee(_transactionTime: number): Promise<number>;
    getValueTimeLock(_lockIdentifier: string): Promise<ValueTimeLockModel | undefined>;
    getWriterValueTimeLock(): Promise<ValueTimeLockModel | undefined>;
    /** Stores each hash given in write() method. */
    hashes: [string][];
    write(anchorString: string, _fee?: number): Promise<void>;
    read(sinceTransactionNumber?: number, _transactionTimeHash?: string): Promise<{
        moreTransactions: boolean;
        transactions: TransactionModel[];
    }>;
    getFirstValidTransaction(_transactions: TransactionModel[]): Promise<TransactionModel | undefined>;
    private latestTime?;
    getLatestTime: () => Promise<BlockchainTimeModel>;
    get approximateTime(): BlockchainTimeModel;
    /**
     * Hardcodes the latest time to be returned.
     */
    setLatestTime(time: BlockchainTimeModel): void;
}
