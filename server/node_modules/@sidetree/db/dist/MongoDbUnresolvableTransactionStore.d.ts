import { IUnresolvableTransactionStore, TransactionModel } from '@sidetree/common';
import MongoDbBase from './MongoDbBase';
interface IUnresolvableTransaction extends TransactionModel {
    firstFetchTime: number;
    retryAttempts: number;
    nextRetryTime: number;
}
/**
 * Implementation of `IIUnresolvableTransactionStore` that stores the transaction data in a MongoDB database.
 */
export default class MongoDbUnresolvableTransactionStore extends MongoDbBase implements IUnresolvableTransactionStore {
    readonly collectionName: string;
    private exponentialDelayFactorInMilliseconds;
    private maximumUnresolvableTransactionReturnCount;
    /**
     * Constructs a `MongoDbUnresolvableTransactionStore`;
     * @param retryExponentialDelayFactor
     *   The exponential delay factor in milliseconds for retries of unresolvable transactions.
     *   e.g. if it is set to 1 seconds, then the delays for retries will be 1 second, 2 seconds, 4 seconds... until the transaction can be resolved.
     */
    constructor(serverUrl: string, databaseName: string, retryExponentialDelayFactor?: number);
    initialize(): Promise<void>;
    recordUnresolvableTransactionFetchAttempt(transaction: TransactionModel): Promise<void>;
    removeUnresolvableTransaction(transaction: TransactionModel): Promise<void>;
    getUnresolvableTransactionsDueForRetry(maximumReturnCount?: number): Promise<TransactionModel[]>;
    removeUnresolvableTransactionsLaterThan(transactionNumber?: number): Promise<void>;
    /**
     * Gets the list of unresolvable transactions.
     * Mainly used for test purposes.
     */
    getUnresolvableTransactions(): Promise<IUnresolvableTransaction[]>;
}
export {};
