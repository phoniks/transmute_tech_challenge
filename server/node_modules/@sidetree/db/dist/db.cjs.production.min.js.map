{"version":3,"file":"db.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/MongoDb.ts","../src/MongoDbBase.ts","../src/MongoDbCasCache.ts","../src/MongoDbOperationQueue.ts","../src/MongoDbTransactionStore.ts","../src/MongoDbUnresolvableTransactionStore.ts","../src/entity/Operation.ts","../src/OperationStore.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Collection, MongoClient, Db } from 'mongodb';\n\n/**\n * MongoDB related operations.\n */\nexport default class MongoDb {\n  /**\n   * Test if a MongoDB service is running at the specified url.\n   */\n  public static async isServerAvailable(serverUrl: string): Promise<boolean> {\n    try {\n      const client = await MongoClient.connect(serverUrl, {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n      });\n      await client.close();\n    } catch (error) {\n      console.log('Mongoclient connect error: ' + error);\n      return false;\n    }\n    return true;\n  }\n\n  public static async resetDatabase(\n    serverUrl: string,\n    databaseName: string\n  ): Promise<boolean> {\n    try {\n      const client = await MongoClient.connect(serverUrl, {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n      });\n      const db = await client.db(databaseName);\n      const res = await db.dropDatabase();\n      await client.close();\n      return res;\n    } catch (error) {\n      console.log('Mongoclient connect error: ' + error);\n      return false;\n    }\n  }\n\n  public static async createCollectionIfNotExist(\n    db: Db,\n    collectionName: string\n  ): Promise<Collection<any>> {\n    // Get the names of existing collections.\n    const collections = await db.collections();\n    const collectionNames = collections.map(\n      (collection) => collection.collectionName\n    );\n    const collectionExists = collectionNames.find((c) => c === collectionName);\n\n    // If the collection exists, use it; else create it then use it.\n    let collection;\n    if (collectionExists) {\n      console.info(`Reusing existing collection ${collectionName}`);\n      collection = db.collection(collectionName);\n    } else {\n      console.info(`Creating new collection ${collectionName}`);\n      collection = await db.createCollection(collectionName);\n    }\n    return collection;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Collection, MongoClient, Db } from 'mongodb';\nimport MongoDb from './MongoDb';\n\nexport default abstract class MongoDbBase {\n  abstract collectionName: string;\n  private serverUrl: string;\n  public databaseName: string;\n  private client: MongoClient | undefined;\n  protected db: Db | undefined;\n  protected collection: Collection<any> | undefined;\n\n  constructor(serverUrl: string, databaseName: string) {\n    this.serverUrl = serverUrl;\n    this.databaseName = databaseName;\n  }\n\n  public async close(): Promise<void> {\n    return this.client!.close();\n  }\n\n  public async clearCollection(): Promise<void> {\n    await this.collection!.deleteMany({});\n  }\n\n  public async initialize(): Promise<void> {\n    this.client =\n      this.client ||\n      (await MongoClient.connect(this.serverUrl, {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n      })); // `useNewUrlParser` addresses nodejs's URL parser deprecation warning.\n    this.db = this.client.db(this.databaseName);\n    this.collection = await MongoDb.createCollectionIfNotExist(\n      this.db!,\n      this.collectionName\n    );\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchResult, FetchResultCode } from '@sidetree/common';\nimport MongoDbBase from './MongoDbBase';\n\nexport default class MongoDbCasCache extends MongoDbBase {\n  readonly collectionName = 'cas-cache';\n\n  public async initialize(): Promise<void> {\n    await super.initialize();\n    await this.collection!.createIndex({ hash: 1 }, { unique: true });\n  }\n\n  async read(hash: string): Promise<FetchResult> {\n    const operations = await this.collection!.find({ hash })\n      .limit(1)\n      .toArray();\n    if (operations.length === 1) {\n      const operation = operations.pop();\n      return {\n        code: FetchResultCode.Success,\n        content: operation!.content.buffer as Buffer,\n      };\n    }\n    return {\n      code: FetchResultCode.NotFound,\n    };\n  }\n\n  async write(hash: string, content: Buffer): Promise<void> {\n    try {\n      await this.collection!.insertOne({ hash, content });\n    } catch (error) {\n      // Duplicate insert errors (error code 11000).\n      if (error.code !== 11000) {\n        throw error;\n      }\n    }\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ErrorCode,\n  IOperationQueue,\n  SidetreeError,\n  QueuedOperationModel,\n} from '@sidetree/common';\nimport { Binary, ObjectId } from 'mongodb';\nimport MongoDbBase from './MongoDbBase';\n\n/**\n * Sidetree operation stored in MongoDb.\n * Note: we use the shorter property name \"opIndex\" instead of \"operationIndex\" due to a constraint imposed by CosmosDB/MongoDB:\n * the sum of property names of a unique index keys need to be less than 40 characters.\n * Note: We represent opIndex, transactionNumber, and transactionTime as long instead of number (double) to avoid some floating\n * point comparison quirks.\n */\ninterface IMongoQueuedOperation {\n  _id?: ObjectId;\n  didUniqueSuffix: string;\n  operationBufferBsonBinary: Binary;\n}\n\n/**\n * Operation queue used by the Batch Writer implemented using MongoDB.\n */\nexport default class MongoDbOperationQueue extends MongoDbBase\n  implements IOperationQueue {\n  readonly collectionName = 'queued-operations';\n\n  public async initialize(): Promise<void> {\n    await super.initialize();\n    await this.collection!.createIndex(\n      { didUniqueSuffix: 1 },\n      { unique: true }\n    );\n  }\n\n  async enqueue(\n    didUniqueSuffix: string,\n    operationBuffer: Buffer\n  ): Promise<void> {\n    try {\n      const queuedOperation: IMongoQueuedOperation = {\n        didUniqueSuffix,\n        operationBufferBsonBinary: new Binary(operationBuffer),\n      };\n\n      await this.collection!.insertOne(queuedOperation);\n    } catch (error) {\n      // Duplicate insert errors (error code 11000).\n      if (error.code === 11000) {\n        throw new SidetreeError(ErrorCode.BatchWriterAlreadyHasOperationForDid);\n      }\n\n      throw error;\n    }\n  }\n\n  async dequeue(count: number): Promise<QueuedOperationModel[]> {\n    if (count <= 0) {\n      return [];\n    }\n\n    const queuedOperations = await this.collection!.find()\n      .sort({ _id: 1 })\n      .limit(count)\n      .toArray();\n    const lastOperation = queuedOperations[queuedOperations.length - 1];\n    await this.collection!.deleteMany({ _id: { $lte: lastOperation._id } });\n\n    return queuedOperations.map((operation) =>\n      MongoDbOperationQueue.convertToQueuedOperationModel(operation)\n    );\n  }\n\n  async peek(count: number): Promise<QueuedOperationModel[]> {\n    if (count <= 0) {\n      return [];\n    }\n\n    // NOTE: `_id` is the default index that is sorted based by create time.\n    const queuedOperations = await this.collection!.find()\n      .sort({ _id: 1 })\n      .limit(count)\n      .toArray();\n\n    return queuedOperations.map((operation) =>\n      MongoDbOperationQueue.convertToQueuedOperationModel(operation)\n    );\n  }\n\n  /**\n   * Checks to see if the queue already contains an operation for the given DID unique suffix.\n   */\n  async contains(didUniqueSuffix: string): Promise<boolean> {\n    const operations = await this.collection!.find({ didUniqueSuffix })\n      .limit(1)\n      .toArray();\n    return operations.length > 0;\n  }\n\n  private static convertToQueuedOperationModel(\n    mongoQueuedOperation: IMongoQueuedOperation\n  ): QueuedOperationModel {\n    return {\n      didUniqueSuffix: mongoQueuedOperation.didUniqueSuffix,\n      operationBuffer: mongoQueuedOperation.operationBufferBsonBinary.buffer,\n    };\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ITransactionStore, TransactionModel } from '@sidetree/common';\nimport { Cursor, Long } from 'mongodb';\nimport MongoDbBase from './MongoDbBase';\n\n/**\n * Implementation of ITransactionStore that stores the transaction data in a MongoDB database.\n */\nexport default class MongoDbTransactionStore extends MongoDbBase\n  implements ITransactionStore {\n  readonly collectionName = 'transactions';\n\n  public async initialize(): Promise<void> {\n    await super.initialize();\n    await this.collection!.createIndex(\n      { transactionNumber: 1 },\n      { unique: true }\n    );\n  }\n\n  /**\n   * Returns the number of transactions in the store.\n   * Mainly used by tests.\n   */\n  public async getTransactionsCount(): Promise<number> {\n    const transactionCount = await this.collection!.countDocuments();\n    return transactionCount;\n  }\n\n  public async getTransaction(\n    transactionNumber: number\n  ): Promise<TransactionModel | undefined> {\n    const transactions = await this.collection!.find({\n      transactionNumber: Long.fromNumber(transactionNumber),\n    }).toArray();\n    if (transactions.length === 0) {\n      return undefined;\n    }\n\n    const transaction = transactions[0];\n    return transaction;\n  }\n\n  public async getTransactionsLaterThan(\n    transactionNumber: number | undefined,\n    max: number | undefined\n  ): Promise<TransactionModel[]> {\n    let transactions = [];\n\n    try {\n      let dbCursor: Cursor<any>;\n\n      // If given `undefined`, return transactions from the start.\n      if (transactionNumber === undefined) {\n        dbCursor = this.collection!.find();\n      } else {\n        dbCursor = this.collection!.find({\n          transactionNumber: { $gt: Long.fromNumber(transactionNumber) },\n        });\n      }\n\n      // If a limit is defined then set it.\n      if (max) {\n        dbCursor = dbCursor.limit(max);\n      }\n\n      // Sort the output\n      dbCursor = dbCursor.sort({ transactionNumber: 1 });\n\n      // Fetch the transactions\n      transactions = await dbCursor.toArray();\n    } catch (error) {\n      console.error(error);\n    }\n\n    return transactions;\n  }\n\n  async addTransaction(transaction: TransactionModel): Promise<void> {\n    try {\n      const transactionInMongoDb = {\n        anchorString: transaction.anchorString,\n        // NOTE: MUST force `transactionNumber` to be Int64 in MongoDB.\n        transactionNumber: Long.fromNumber(transaction.transactionNumber),\n        transactionTime: transaction.transactionTime,\n        transactionTimeHash: transaction.transactionTimeHash,\n        transactionFeePaid: transaction.transactionFeePaid,\n        normalizedTransactionFee: transaction.normalizedTransactionFee,\n        writer: transaction.writer,\n      };\n      await this.collection!.insertOne(transactionInMongoDb);\n    } catch (error) {\n      // Swallow duplicate insert errors (error code 11000) as no-op; rethrow others\n      if (error.code !== 11000) {\n        throw error;\n      }\n    }\n  }\n\n  async getLastTransaction(): Promise<TransactionModel | undefined> {\n    const lastTransactions = await this.collection!.find()\n      .limit(1)\n      .sort({ transactionNumber: -1 })\n      .toArray();\n    if (lastTransactions.length === 0) {\n      return undefined;\n    }\n\n    const lastProcessedTransaction = lastTransactions[0];\n    return lastProcessedTransaction;\n  }\n\n  async getExponentiallySpacedTransactions(): Promise<TransactionModel[]> {\n    const exponentiallySpacedTransactions: TransactionModel[] = [];\n    const allTransactions = await this.collection!.find()\n      .sort({ transactionNumber: 1 })\n      .toArray();\n\n    let index = allTransactions.length - 1;\n    let distance = 1;\n    while (index >= 0) {\n      exponentiallySpacedTransactions.push(allTransactions[index]);\n      index -= distance;\n      distance *= 2;\n    }\n    return exponentiallySpacedTransactions;\n  }\n\n  async removeTransactionsLaterThan(transactionNumber?: number): Promise<void> {\n    // If given `undefined`, remove all transactions.\n    if (transactionNumber === undefined) {\n      await this.clearCollection();\n      return;\n    }\n\n    await this.collection!.deleteMany({\n      transactionNumber: { $gt: Long.fromNumber(transactionNumber) },\n    });\n  }\n\n  /**\n   * Gets the list of processed transactions.\n   * Mainly used for test purposes.\n   */\n  public async getTransactions(): Promise<TransactionModel[]> {\n    const transactions = await this.collection!.find()\n      .sort({ transactionNumber: 1 })\n      .toArray();\n    return transactions;\n  }\n\n  /**\n   * Gets a list of transactions between the bounds of transaction time. The smaller value will be inclusive while the bigger be exclusive\n   * @param inclusiveBeginTransactionTime The first transaction time to begin querying for\n   * @param exclusiveEndTransactionTime The transaction time to stop querying for\n   */\n  public async getTransactionsStartingFrom(\n    inclusiveBeginTransactionTime: number,\n    exclusiveEndTransactionTime: number\n  ): Promise<TransactionModel[]> {\n    let cursor: Cursor<any>;\n    if (inclusiveBeginTransactionTime === exclusiveEndTransactionTime) {\n      // if begin === end, query for 1 transaction time\n      cursor = this.collection!.find({\n        transactionTime: {\n          $eq: Long.fromNumber(inclusiveBeginTransactionTime),\n        },\n      });\n    } else {\n      cursor = this.collection!.find({\n        $and: [\n          {\n            transactionTime: {\n              $gte: Long.fromNumber(inclusiveBeginTransactionTime),\n            },\n          },\n          {\n            transactionTime: {\n              $lt: Long.fromNumber(exclusiveEndTransactionTime),\n            },\n          },\n        ],\n      });\n    }\n\n    const transactions: TransactionModel[] = await cursor\n      .sort({ transactionNumber: 1 })\n      .toArray();\n    return transactions;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  IUnresolvableTransactionStore,\n  TransactionModel,\n} from '@sidetree/common';\nimport { Long } from 'mongodb';\nimport MongoDbBase from './MongoDbBase';\n\ninterface IUnresolvableTransaction extends TransactionModel {\n  firstFetchTime: number;\n  retryAttempts: number;\n  nextRetryTime: number;\n}\n\n/**\n * Implementation of `IIUnresolvableTransactionStore` that stores the transaction data in a MongoDB database.\n */\n\nexport default class MongoDbUnresolvableTransactionStore extends MongoDbBase\n  implements IUnresolvableTransactionStore {\n  public readonly collectionName: string = 'unresolvable-transactions';\n\n  private exponentialDelayFactorInMilliseconds = 60000;\n  private maximumUnresolvableTransactionReturnCount = 100;\n\n  /**\n   * Constructs a `MongoDbUnresolvableTransactionStore`;\n   * @param retryExponentialDelayFactor\n   *   The exponential delay factor in milliseconds for retries of unresolvable transactions.\n   *   e.g. if it is set to 1 seconds, then the delays for retries will be 1 second, 2 seconds, 4 seconds... until the transaction can be resolved.\n   */\n  constructor(\n    serverUrl: string,\n    databaseName: string,\n    retryExponentialDelayFactor?: number\n  ) {\n    super(serverUrl, databaseName);\n\n    if (retryExponentialDelayFactor !== undefined) {\n      this.exponentialDelayFactorInMilliseconds = retryExponentialDelayFactor;\n    }\n  }\n\n  public async initialize(): Promise<void> {\n    await super.initialize();\n    await this.collection!.createIndex(\n      { transactionTime: 1, transactionNumber: 1 },\n      { unique: true }\n    );\n    await this.collection!.createIndex({\n      nextRetryTime: 1,\n    });\n  }\n\n  async recordUnresolvableTransactionFetchAttempt(\n    transaction: TransactionModel\n  ): Promise<void> {\n    // Try to get the unresolvable transaction from store.\n    const transactionTime = transaction.transactionTime;\n    const transactionNumber = transaction.transactionNumber;\n    const searchFilter = {\n      transactionTime,\n      transactionNumber: Long.fromNumber(transactionNumber),\n    };\n    const findResults = await this.collection!.find(searchFilter).toArray();\n    let unresolvableTransaction: IUnresolvableTransaction | undefined;\n    if (findResults && findResults.length > 0) {\n      unresolvableTransaction = findResults[0];\n    }\n\n    // If unresolvable transaction not found in store, insert a new one; else update the info on retry attempts.\n    if (unresolvableTransaction === undefined) {\n      const newUnresolvableTransaction = {\n        transactionTime,\n        transactionNumber: Long.fromNumber(transactionNumber),\n        anchorString: transaction.anchorString,\n        transactionTimeHash: transaction.transactionTimeHash,\n        firstFetchTime: Date.now(),\n        retryAttempts: 0,\n        nextRetryTime: Date.now(),\n      };\n\n      await this.collection!.insertOne(newUnresolvableTransaction);\n    } else {\n      const retryAttempts = unresolvableTransaction.retryAttempts + 1;\n\n      // Exponentially delay the retry the more attempts are done in the past.\n      const anchorString = transaction.anchorString;\n      const requiredElapsedTimeSinceFirstFetchBeforeNextRetry =\n        Math.pow(2, unresolvableTransaction.retryAttempts) *\n        this.exponentialDelayFactorInMilliseconds;\n      const requiredElapsedTimeInSeconds =\n        requiredElapsedTimeSinceFirstFetchBeforeNextRetry / 1000;\n      console.info(\n        `Record transaction ${transactionNumber} with anchor string ${anchorString} to retry after ${requiredElapsedTimeInSeconds} seconds.`\n      );\n      const nextRetryTime =\n        unresolvableTransaction.firstFetchTime +\n        requiredElapsedTimeSinceFirstFetchBeforeNextRetry;\n\n      const searchFilter = {\n        transactionTime,\n        transactionNumber: Long.fromNumber(transactionNumber),\n      };\n      await this.collection!.updateOne(searchFilter, {\n        $set: { retryAttempts, nextRetryTime },\n      });\n    }\n  }\n\n  async removeUnresolvableTransaction(\n    transaction: TransactionModel\n  ): Promise<void> {\n    const transactionTime = transaction.transactionTime;\n    const transactionNumber = transaction.transactionNumber;\n    await this.collection!.deleteOne({\n      transactionTime,\n      transactionNumber: Long.fromNumber(transactionNumber),\n    });\n  }\n\n  async getUnresolvableTransactionsDueForRetry(\n    maximumReturnCount?: number\n  ): Promise<TransactionModel[]> {\n    // Override the return count if it is specified.\n    let returnCount = this.maximumUnresolvableTransactionReturnCount;\n    if (maximumReturnCount !== undefined) {\n      returnCount = maximumReturnCount;\n    }\n\n    const now = Date.now();\n    const unresolvableTransactionsToRetry = await this.collection!.find({\n      nextRetryTime: { $lte: now },\n    })\n      .sort({ nextRetryTime: 1 })\n      .limit(returnCount)\n      .toArray();\n\n    return unresolvableTransactionsToRetry;\n  }\n\n  async removeUnresolvableTransactionsLaterThan(\n    transactionNumber?: number\n  ): Promise<void> {\n    // If given `undefined`, remove all transactions.\n    if (transactionNumber === undefined) {\n      await this.clearCollection();\n      return;\n    }\n\n    await this.collection!.deleteMany({\n      transactionNumber: { $gt: Long.fromNumber(transactionNumber) },\n    });\n  }\n\n  /**\n   * Gets the list of unresolvable transactions.\n   * Mainly used for test purposes.\n   */\n  public async getUnresolvableTransactions(): Promise<\n    IUnresolvableTransaction[]\n  > {\n    const transactions = await this.collection!.find()\n      .sort({ transactionTime: 1, transactionNumber: 1 })\n      .toArray();\n    return transactions;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, Column, PrimaryColumn, ObjectIdColumn } from 'typeorm';\nimport { OperationType } from '@sidetree/common';\n\n@Entity()\nexport default class Operation {\n  @PrimaryColumn()\n  @ObjectIdColumn()\n  _id?: string;\n\n  @Column()\n  didUniqueSuffix: string;\n\n  @Column()\n  type: OperationType;\n\n  @Column()\n  operationBuffer: Buffer;\n\n  @Column()\n  transactionTime: number;\n\n  @Column()\n  transactionNumber: number;\n\n  @Column()\n  operationIndex: number;\n\n  constructor(\n    didUniqueSuffix: string,\n    type: OperationType,\n    operationBuffer: Buffer,\n    transactionTime: number,\n    transactionNumber: number,\n    operationIndex: number\n  ) {\n    this.didUniqueSuffix = didUniqueSuffix;\n    this.type = type;\n    this.operationBuffer = operationBuffer;\n    this.transactionTime = transactionTime;\n    this.transactionNumber = transactionNumber;\n    this.operationIndex = operationIndex;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  IOperationStore,\n  AnchoredOperationModel,\n  OperationType,\n} from '@sidetree/common';\nimport { createConnection, MongoRepository, Connection } from 'typeorm';\nimport Operation from './entity/Operation';\n\nexport default class OperationStore implements IOperationStore {\n  private connection: Connection | undefined;\n  private repo: MongoRepository<Operation> | undefined;\n\n  private readonly databaseName: string;\n\n  constructor(private serverUrl: string, databaseName?: string) {\n    this.databaseName = databaseName ? databaseName : 'sidetree';\n  }\n\n  public async initialize(): Promise<void> {\n    const connection = await createConnection({\n      // Typeorm does not allow two connections to have the same name\n      // So we use a different name everytime in order to have parallel connections\n      name: `${Date.now()}`,\n      type: 'mongodb',\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n      url: `${this.serverUrl}${this.databaseName}`,\n      entities: [Operation],\n    });\n    this.connection = connection;\n    this.repo = connection.getMongoRepository(Operation);\n  }\n  public async close(): Promise<void> {\n    return this.connection!.close();\n  }\n\n  public async put(operations: AnchoredOperationModel[]): Promise<void> {\n    // Remove duplicates (same operationIndex) from the operations array\n    const operationsWithoutDuplicates = operations.reduce(\n      (opsWithoutDuplicates: AnchoredOperationModel[], operation) => {\n        const exists = opsWithoutDuplicates.find(\n          (op) => op.operationIndex === operation.operationIndex\n        );\n        if (exists) {\n          return opsWithoutDuplicates;\n        } else {\n          return [...opsWithoutDuplicates, operation];\n        }\n      },\n      []\n    );\n    // Only insert new elements\n    const onlyNewElements: AnchoredOperationModel[] = [];\n    for (const operation of operationsWithoutDuplicates) {\n      const anchoredOperation: AnchoredOperationModel = operation;\n      const res = await this.get(anchoredOperation.didUniqueSuffix);\n      const isDuplicated = res.find(\n        (op) =>\n          op.operationIndex === anchoredOperation.operationIndex &&\n          op.transactionNumber === anchoredOperation.transactionNumber\n      );\n      if (!isDuplicated) {\n        onlyNewElements.push(anchoredOperation);\n      }\n    }\n    if (onlyNewElements.length > 0) {\n      await this.repo!.insertMany(onlyNewElements);\n    }\n  }\n\n  public async get(didUniqueSuffix: string): Promise<AnchoredOperationModel[]> {\n    const results = await this.repo!.find({ didUniqueSuffix });\n    // Ensure operations are sorted by increasing order of operationIndex\n    results.sort((op1, op2) => op1.operationIndex - op2.operationIndex);\n    return results;\n  }\n\n  public async delete(transactionNumber?: number): Promise<void> {\n    if (transactionNumber) {\n      await this.repo!.deleteMany({\n        transactionNumber: { $gt: transactionNumber },\n      });\n    } else {\n      await this.repo!.deleteMany({});\n    }\n  }\n\n  public async deleteUpdatesEarlierThan(\n    didUniqueSuffix: string,\n    transactionNumber: number,\n    operationIndex: number\n  ): Promise<void> {\n    await this.repo!.deleteMany({\n      $or: [\n        {\n          didUniqueSuffix,\n          transactionNumber: { $lt: transactionNumber },\n          type: OperationType.Update,\n        },\n        {\n          didUniqueSuffix,\n          transactionNumber,\n          operationIndex: { $lt: operationIndex },\n          type: OperationType.Update,\n        },\n      ],\n    });\n  }\n}\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","_catch","body","recover","asyncIterator","MongoDb","isServerAvailable","serverUrl","MongoClient","connect","useUnifiedTopology","useNewUrlParser","client","close","error","console","log","resetDatabase","databaseName","db","dropDatabase","res","createCollectionIfNotExist","collectionName","collections","collection","collectionExists","map","find","c","info","createCollection","MongoDbBase","clearCollection","deleteMany","initialize","_this6","MongoDbCasCache","_this3","createIndex","hash","unique","read","limit","toArray","operations","length","operation","pop","code","FetchResultCode","Success","content","buffer","NotFound","write","_this7","insertOne","MongoDbOperationQueue","didUniqueSuffix","enqueue","operationBuffer","queuedOperation","operationBufferBsonBinary","Binary","_this5","SidetreeError","ErrorCode","BatchWriterAlreadyHasOperationForDid","dequeue","count","sort","_id","queuedOperations","$lte","convertToQueuedOperationModel","peek","contains","mongoQueuedOperation","MongoDbTransactionStore","transactionNumber","getTransactionsCount","countDocuments","getTransaction","Long","fromNumber","transactions","getTransactionsLaterThan","max","dbCursor","undefined","_this9","$gt","addTransaction","transaction","transactionInMongoDb","anchorString","transactionTime","transactionTimeHash","transactionFeePaid","normalizedTransactionFee","writer","_this11","getLastTransaction","lastTransactions","getExponentiallySpacedTransactions","exponentiallySpacedTransactions","allTransactions","index","distance","push","removeTransactionsLaterThan","_this17","getTransactions","getTransactionsStartingFrom","inclusiveBeginTransactionTime","exclusiveEndTransactionTime","cursor","$eq","$and","$gte","$lt","MongoDbUnresolvableTransactionStore","retryExponentialDelayFactor","exponentialDelayFactorInMilliseconds","nextRetryTime","recordUnresolvableTransactionFetchAttempt","searchFilter","findResults","unresolvableTransaction","newUnresolvableTransaction","firstFetchTime","Date","now","retryAttempts","requiredElapsedTimeSinceFirstFetchBeforeNextRetry","Math","pow","updateOne","$set","removeUnresolvableTransaction","deleteOne","getUnresolvableTransactionsDueForRetry","maximumReturnCount","returnCount","maximumUnresolvableTransactionReturnCount","removeUnresolvableTransactionsLaterThan","getUnresolvableTransactions","Operation","type","operationIndex","__decorate","PrimaryColumn","ObjectIdColumn","Column","Buffer","Entity","OperationStore","createConnection","name","url","_this2","entities","connection","repo","getMongoRepository","put","onlyNewElements","insertMany","operationsWithoutDuplicates","reduce","opsWithoutDuplicates","op","target","check","step","reject","_cycle","next","done","return","_fixup","TypeError","values","i","array","_forTo","anchoredOperation","get","results","op1","op2","deleteUpdatesEarlierThan","$or","OperationType","Update"],"mappings":"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"}