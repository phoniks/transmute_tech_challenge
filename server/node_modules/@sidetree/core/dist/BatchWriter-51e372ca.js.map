{"version":3,"file":"BatchWriter-51e372ca.js","sources":["../src/LogColor.ts","../src/write/BatchWriter.ts"],"sourcesContent":["/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport chalk from 'chalk';\n\n/**\n * Abstraction for colored logs.\n */\nexport default class LogColor {\n  /** Method for logging in light blue. */\n  public static lightBlue = chalk.hex('#75b0eb');\n\n  /** Method for logging in green. */\n  public static green = chalk.green;\n\n  /** Method for logging in yellow. */\n  public static yellow = chalk.yellow;\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnchoredData,\n  AnchoredDataSerializer,\n  IBatchWriter,\n  IBlockchain,\n  ICas,\n  IOperationQueue,\n  OperationType,\n  protocolParameters,\n  IVersionMetadataFetcher,\n  ValueTimeLockModel,\n} from '@sidetree/common';\nimport CreateOperation from '../CreateOperation';\nimport DeactivateOperation from '../DeactivateOperation';\nimport LogColor from '../LogColor';\nimport Operation from '../Operation';\nimport RecoverOperation from '../RecoverOperation';\nimport UpdateOperation from '../UpdateOperation';\nimport AnchorFile from './AnchorFile';\nimport ChunkFile from './ChunkFile';\nimport MapFile from './MapFile';\nimport FeeManager from '../FeeManager';\nimport ValueTimeLockVerifier from '../ValueTimeLockVerifier';\n\n/**\n * Implementation of the `IBatchWriter`.\n */\nexport default class BatchWriter implements IBatchWriter {\n  public constructor(\n    private operationQueue: IOperationQueue,\n    private blockchain: IBlockchain,\n    private cas: ICas,\n    private versionMetadataFetcher: IVersionMetadataFetcher\n  ) {}\n\n  public async write(): Promise<void> {\n    const normalizedFee = await this.blockchain.getFee(\n      this.blockchain.approximateTime.time\n    );\n    const currentLock = await this.blockchain.getWriterValueTimeLock();\n    const numberOfOpsAllowed = this.getNumberOfOperationsAllowed(currentLock);\n\n    // Get the batch of operations to be anchored on the blockchain.\n    const queuedOperations = await this.operationQueue.peek(numberOfOpsAllowed);\n    const numberOfOperations = queuedOperations.length;\n\n    // Do nothing if there is nothing to batch together.\n    if (queuedOperations.length === 0) {\n      console.info(`No queued operations to batch.`);\n      return;\n    }\n\n    console.info(\n      LogColor.lightBlue(\n        `Batch size = ${LogColor.green(`${numberOfOperations}`)}`\n      )\n    );\n\n    const operationModels = await Promise.all(\n      queuedOperations.map(async (queuedOperation) =>\n        Operation.parse(queuedOperation.operationBuffer)\n      )\n    );\n    const createOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Create\n    ) as CreateOperation[];\n    const recoverOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Recover\n    ) as RecoverOperation[];\n    const updateOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Update\n    ) as UpdateOperation[];\n    const deactivateOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Deactivate\n    ) as DeactivateOperation[];\n\n    // Create the chunk file buffer from the operation models.\n    // NOTE: deactivate operations don't have delta.\n    const chunkFileBuffer = await ChunkFile.createBuffer(\n      createOperations,\n      recoverOperations,\n      updateOperations\n    );\n\n    // Write the chunk file to content addressable store.\n    const chunkFileHash = await this.cas.write(chunkFileBuffer);\n    console.info(\n      LogColor.lightBlue(\n        `Wrote chunk file ${LogColor.green(\n          chunkFileHash\n        )} to content addressable store.`\n      )\n    );\n\n    // Write the map file to content addressable store.\n    const mapFileBuffer = await MapFile.createBuffer(\n      chunkFileHash,\n      updateOperations\n    );\n    const mapFileHash = await this.cas.write(mapFileBuffer);\n    console.info(\n      LogColor.lightBlue(\n        `Wrote map file ${LogColor.green(\n          mapFileHash\n        )} to content addressable store.`\n      )\n    );\n\n    // Write the anchor file to content addressable store.\n    const writerLockId = currentLock ? currentLock.identifier : undefined;\n    const anchorFileBuffer = await AnchorFile.createBuffer(\n      writerLockId,\n      mapFileHash,\n      createOperations,\n      recoverOperations,\n      deactivateOperations\n    );\n    const anchorFileHash = await this.cas.write(anchorFileBuffer);\n    console.info(\n      LogColor.lightBlue(\n        `Wrote anchor file ${LogColor.green(\n          anchorFileHash\n        )} to content addressable store.`\n      )\n    );\n\n    // Anchor the data to the blockchain\n    const dataToBeAnchored: AnchoredData = {\n      anchorFileHash,\n      numberOfOperations,\n    };\n\n    const stringToWriteToBlockchain = AnchoredDataSerializer.serialize(\n      dataToBeAnchored\n    );\n    const fee = FeeManager.computeMinimumTransactionFee(\n      normalizedFee,\n      numberOfOperations\n    );\n    console.info(\n      LogColor.lightBlue(\n        `Writing data to blockchain: ${LogColor.green(\n          stringToWriteToBlockchain\n        )} with minimum fee of: ${LogColor.green(`${fee}`)}`\n      )\n    );\n\n    await this.blockchain.write(stringToWriteToBlockchain, fee);\n\n    // Remove written operations from queue after batch writing has completed successfully.\n    await this.operationQueue.dequeue(queuedOperations.length);\n  }\n\n  private getNumberOfOperationsAllowed(\n    valueTimeLock: ValueTimeLockModel | undefined\n  ): number {\n    const maxNumberOfOpsAllowedByProtocol =\n      protocolParameters.maxOperationsPerBatch;\n    const maxNumberOfOpsAllowedByLock = ValueTimeLockVerifier.calculateMaxNumberOfOperationsAllowed(\n      valueTimeLock,\n      this.versionMetadataFetcher\n    );\n\n    if (maxNumberOfOpsAllowedByLock > maxNumberOfOpsAllowedByProtocol) {\n      // tslint:disable-next-line: max-line-length\n      console.info(\n        `Maximum number of operations allowed by value time lock: ${maxNumberOfOpsAllowedByLock}; Maximum number of operations allowed by protocol: ${maxNumberOfOpsAllowedByProtocol}`\n      );\n    }\n\n    return Math.min(\n      maxNumberOfOpsAllowedByLock,\n      maxNumberOfOpsAllowedByProtocol\n    );\n  }\n}\n"],"names":["LogColor","chalk","hex","green","yellow","operationQueue","blockchain","cas","versionMetadataFetcher","write","this","_this2","getFee","approximateTime","time","normalizedFee","getWriterValueTimeLock","currentLock","numberOfOpsAllowed","getNumberOfOperationsAllowed","peek","queuedOperations","numberOfOperations","length","console","info","lightBlue","Promise","all","map","queuedOperation","Operation","parse","operationBuffer","operationModels","createOperations","filter","operation","type","OperationType","Create","recoverOperations","Recover","updateOperations","Update","deactivateOperations","Deactivate","ChunkFile","createBuffer","chunkFileBuffer","chunkFileHash","MapFile","mapFileBuffer","mapFileHash","AnchorFile","identifier","undefined","anchorFileBuffer","anchorFileHash","stringToWriteToBlockchain","AnchoredDataSerializer","serialize","fee","FeeManager","computeMinimumTransactionFee","dequeue","valueTimeLock","maxNumberOfOpsAllowedByProtocol","protocolParameters","maxOperationsPerBatch","maxNumberOfOpsAllowedByLock","ValueTimeLockVerifier","calculateMaxNumberOfOperationsAllowed","Math","min"],"mappings":"uaAwBqBA,eAELA,YAAYC,EAAMC,IAAI,WAGtBF,QAAQC,EAAME,MAGdH,SAASC,EAAMG,6CCgBnBC,EACAC,EACAC,EACAC,uBAHAH,kBACAC,WACAC,8BACAC,6BAGGC,2BACiBC,4BAAAC,EAAKL,WAAWM,OAC1CD,EAAKL,WAAWO,gBAAgBC,sBAD5BC,0BAGoBJ,EAAKL,WAAWU,yCAApCC,OACAC,EAAqBP,EAAKQ,6BAA6BF,0BAG9BN,EAAKN,eAAee,KAAKF,mBAAlDG,OACAC,EAAqBD,EAAiBE,UAGZ,IAA5BF,EAAiBE,cAKrBC,QAAQC,KACNzB,EAAS0B,0BACS1B,EAASG,SAASmB,qBAIRK,QAAQC,IACpCP,EAAiBQ,cAAWC,8BAC1BC,YAAUC,MAAMF,EAAgBG,yEAF9BC,OAKAC,EAAmBD,EAAgBE,QACvC,SAACC,UAAcA,EAAUC,OAASC,gBAAcC,UAE5CC,EAAoBP,EAAgBE,QACxC,SAACC,UAAcA,EAAUC,OAASC,gBAAcG,WAE5CC,EAAmBT,EAAgBE,QACvC,SAACC,UAAcA,EAAUC,OAASC,gBAAcK,UAE5CC,EAAuBX,EAAgBE,QAC3C,SAACC,UAAcA,EAAUC,OAASC,gBAAcO,qCAKpBC,YAAUC,aACtCb,EACAM,EACAE,mBAHIM,0BAOsBtC,EAAKJ,IAAIE,MAAMwC,mBAArCC,UACN1B,QAAQC,KACNzB,EAAS0B,8BACa1B,EAASG,MAC3B+C,sDAMsBC,UAAQH,aAClCE,EACAP,mBAFIS,0BAIoBzC,EAAKJ,IAAIE,MAAM2C,mBAAnCC,UACN7B,QAAQC,KACNzB,EAAS0B,4BACW1B,EAASG,MACzBkD,sDAOyBC,aAAWN,aADrB/B,EAAcA,EAAYsC,gBAAaC,EAG1DH,EACAlB,EACAM,EACAI,mBALIY,0BAOuB9C,EAAKJ,IAAIE,MAAMgD,mBAAtCC,GACNlC,QAAQC,KACNzB,EAAS0B,+BACc1B,EAASG,MAC5BuD,0CAWAC,EAA4BC,yBAAuBC,UALlB,CACrCH,eAAAA,EACApC,mBAAAA,IAMIwC,EAAMC,aAAWC,6BACrBjD,EACAO,UAEFE,QAAQC,KACNzB,EAAS0B,yCACwB1B,EAASG,MACtCwD,4BACwB3D,EAASG,SAAS2D,qBAI1CnD,EAAKL,WAAWG,MAAMkD,EAA2BG,4CAGjDnD,EAAKN,eAAe4D,QAAQ5C,EAAiBE,sDAtGjDC,QAAQC,sFAyGJN,6BAAA,SACN+C,OAEMC,EACJC,qBAAmBC,sBACfC,EAA8BC,wBAAsBC,sCACxDN,EACAxD,KAAKF,+BAGH8D,EAA8BH,GAEhC3C,QAAQC,iEACsD6C,yDAAkFH,GAI3IM,KAAKC,IACVJ,EACAH"}