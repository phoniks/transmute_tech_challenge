{"version":3,"file":"TransactionSelector-dc944ebd.js","sources":["../src/TransactionSelector.ts"],"sourcesContent":["/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnchoredDataSerializer,\n  ErrorCode,\n  ITransactionSelector,\n  ITransactionStore,\n  SidetreeError,\n  TransactionModel,\n  protocolParameters,\n} from '@sidetree/common';\nimport PriorityQueue from 'priorityqueue';\n\n/**\n * rate limits how many operations is valid per block\n */\nexport default class TransactionSelector implements ITransactionSelector {\n  private maxNumberOfOperationsPerBlock: number;\n  private maxNumberOfTransactionsPerBlock: number;\n  public constructor(private transactionStore: ITransactionStore) {\n    this.maxNumberOfOperationsPerBlock =\n      protocolParameters.maxNumberOfOperationsPerTransactionTime;\n    this.maxNumberOfTransactionsPerBlock =\n      protocolParameters.maxNumberOfTransactionsPerTransactionTime;\n  }\n\n  private static getTransactionPriorityQueue() {\n    const comparator = (a: TransactionModel, b: TransactionModel) => {\n      // higher fee comes first. If fees are the same, earlier transaction comes first\n      return (\n        a.transactionFeePaid - b.transactionFeePaid ||\n        b.transactionNumber - a.transactionNumber\n      );\n    };\n\n    return new PriorityQueue({ comparator });\n  }\n\n  /**\n   * Returns an array of transactions that should be processed. Ranked by highest fee paid per transaction and up to the\n   * max number of operations per block\n   * @param transactions The transactions that should be ranked and considered to process\n   */\n  public async selectQualifiedTransactions(\n    transactions: TransactionModel[]\n  ): Promise<TransactionModel[]> {\n    if (!transactions.length) {\n      return [];\n    }\n\n    const transactionsPriorityQueue = TransactionSelector.getTransactionPriorityQueue();\n\n    const currentTransactionTime = transactions[0].transactionTime;\n\n    TransactionSelector.validateTransactions(\n      transactions,\n      currentTransactionTime\n    );\n    TransactionSelector.enqueueFirstTransactionFromEachWriter(\n      transactions,\n      currentTransactionTime,\n      transactionsPriorityQueue\n    );\n\n    const [\n      numberOfOperations,\n      numberOfTransactions,\n    ] = await this.getNumberOfOperationsAndTransactionsAlreadyInTransactionTime(\n      currentTransactionTime\n    );\n    const numberOfOperationsToQualify =\n      this.maxNumberOfOperationsPerBlock - numberOfOperations;\n    const numberOfTransactionsToQualify =\n      this.maxNumberOfTransactionsPerBlock - numberOfTransactions;\n\n    const transactionsToReturn = TransactionSelector.getHighestFeeTransactionsFromCurrentTransactionTime(\n      numberOfOperationsToQualify,\n      numberOfTransactionsToQualify,\n      transactionsPriorityQueue\n    );\n\n    return transactionsToReturn;\n  }\n\n  private static validateTransactions(\n    transactions: TransactionModel[],\n    currentTransactionTime: number\n  ) {\n    for (const transaction of transactions) {\n      // expect all transactions to be in the same transaction time\n      if (transaction.transactionTime !== currentTransactionTime) {\n        throw new SidetreeError(\n          ErrorCode.TransactionsNotInSameBlock,\n          'transaction must be in the same block to perform rate limiting, investigate and fix'\n        );\n      }\n    }\n  }\n\n  private static enqueueFirstTransactionFromEachWriter(\n    transactions: TransactionModel[],\n    currentTransactionTime: number,\n    transactionsPriorityQueue: any\n  ) {\n    const writerToTransactionNumberMap = new Map();\n    // if multiple transactions have the same writer, take the first one in the array and enqueue into transactionPriorityQueue\n    for (const transaction of transactions) {\n      // only 1 transaction is allowed per writer\n      if (writerToTransactionNumberMap.has(transaction.writer)) {\n        const acceptedTransactionNumber = writerToTransactionNumberMap.get(\n          transaction.writer\n        );\n        // tslint:disable-next-line:max-line-length\n        console.info(\n          `Multiple transactions found in transaction time ${currentTransactionTime} from writer ${transaction.writer}, considering transaction ${acceptedTransactionNumber} and ignoring ${transaction.transactionNumber}`\n        );\n      } else {\n        transactionsPriorityQueue.push(transaction);\n        writerToTransactionNumberMap.set(\n          transaction.writer,\n          transaction.transactionNumber\n        );\n      }\n    }\n  }\n\n  private async getNumberOfOperationsAndTransactionsAlreadyInTransactionTime(\n    transactionTime: number\n  ): Promise<number[]> {\n    const transactions = await this.transactionStore.getTransactionsStartingFrom(\n      transactionTime,\n      transactionTime\n    );\n    let numberOfOperations = 0;\n    if (transactions) {\n      for (const transaction of transactions) {\n        try {\n          const numOfOperationsInCurrentTransaction = AnchoredDataSerializer.deserialize(\n            transaction.anchorString\n          ).numberOfOperations;\n          numberOfOperations += numOfOperationsInCurrentTransaction;\n        } catch (e) {\n          console.debug(\n            `Error thrown in TransactionSelector: ${JSON.stringify(\n              e,\n              Object.getOwnPropertyNames(e)\n            )}`\n          );\n          console.info(\n            `Transaction with anchor string ${transaction.anchorString} not considered as selected.`\n          );\n        }\n      }\n    }\n    const numberOfTransactions = transactions ? transactions.length : 0;\n    return [numberOfOperations, numberOfTransactions];\n  }\n\n  /**\n   * Given transactions within a block, return the ones that should be processed.\n   */\n  private static getHighestFeeTransactionsFromCurrentTransactionTime(\n    numberOfOperationsToQualify: number,\n    numberOfTransactionsToQualify: number,\n    transactionsPriorityQueue: any\n  ): TransactionModel[] {\n    let numberOfOperationsSeen = 0;\n    const transactionsToReturn = [];\n\n    while (\n      transactionsToReturn.length < numberOfTransactionsToQualify &&\n      numberOfOperationsSeen < numberOfOperationsToQualify &&\n      transactionsPriorityQueue.length > 0\n    ) {\n      const currentTransaction = transactionsPriorityQueue.pop();\n      try {\n        const numOfOperationsInCurrentTransaction = AnchoredDataSerializer.deserialize(\n          currentTransaction.anchorString\n        ).numberOfOperations;\n        numberOfOperationsSeen += numOfOperationsInCurrentTransaction;\n        if (numberOfOperationsSeen <= numberOfOperationsToQualify) {\n          transactionsToReturn.push(currentTransaction);\n        }\n      } catch (e) {\n        console.debug(\n          `Error thrown in TransactionSelector: ${JSON.stringify(\n            e,\n            Object.getOwnPropertyNames(e)\n          )}`\n        );\n        console.info(\n          `Transaction with anchor string ${currentTransaction.anchorString} not selected`\n        );\n      }\n    }\n\n    // sort based on transaction number ascending\n    return transactionsToReturn;\n  }\n}\n"],"names":["TransactionSelector","transactionStore","maxNumberOfOperationsPerBlock","protocolParameters","maxNumberOfOperationsPerTransactionTime","maxNumberOfTransactionsPerBlock","maxNumberOfTransactionsPerTransactionTime","getTransactionPriorityQueue","comparator","a","b","transactionFeePaid","transactionNumber","PriorityQueue","selectQualifiedTransactions","transactions","length","transactionsPriorityQueue","currentTransactionTime","transactionTime","validateTransactions","enqueueFirstTransactionFromEachWriter","getNumberOfOperationsAndTransactionsAlreadyInTransactionTime","numberOfOperations","numberOfTransactions","numberOfOperationsToQualify","numberOfTransactionsToQualify","transactionsToReturn","getHighestFeeTransactionsFromCurrentTransactionTime","transaction","SidetreeError","ErrorCode","TransactionsNotInSameBlock","writerToTransactionNumberMap","Map","has","writer","acceptedTransactionNumber","get","console","info","push","set","getTransactionsStartingFrom","numOfOperationsInCurrentTransaction","AnchoredDataSerializer","deserialize","anchorString","e","debug","JSON","stringify","Object","getOwnPropertyNames","numberOfOperationsSeen","currentTransaction","pop"],"mappings":"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"}