import { DidState } from '@sidetree/common';
import UpdateOperation from './UpdateOperation';
/**
 * Class that handles the composition of operations into final external-facing document.
 */
export default class DocumentComposer {
    /**
     * Transforms the given DID state into a DID Document.
     */
    static transformToExternalDocument(didState: DidState, did: string): any;
    /**
     * Applies the update operation to the given document.
     * @returns The resultant document.
     * @throws SidetreeError if invalid operation is given.
     */
    static applyUpdateOperation(operation: UpdateOperation, document: any): Promise<any>;
    /**
     * Validates the schema of the given full document.
     * @throws SidetreeError if given document patch fails validation.
     */
    private static validateDocument;
    /**
     * Validates the schema of the given update document patch.
     * @throws SidetreeError if given document patch fails validation.
     */
    static validateDocumentPatches(patches: any): void;
    private static validatePatch;
    private static validateIetfJsonPatch;
    private static validateAddPublicKeysPatch;
    private static validatePublicKeys;
    private static validateRemovePublicKeysPatch;
    /**
     * validate update patch for removing service endpoints
     */
    private static validateRemoveServiceEndpointsPatch;
    /**
     * Validates update patch for adding service endpoints.
     */
    private static validateAddServiceEndpointsPatch;
    /**
     * Validates and parses services endpoints
     * @param service_endpoints the service endpoints to validate and parse
     */
    private static validateServiceEndpoints;
    private static validateId;
    /**
     * Applies the given patches in order to the given document.
     * NOTE: Assumes no schema validation is needed, since validation should've already occurred at the time of the operation being parsed.
     * @returns The resultant document.
     */
    static applyPatches(document: any, patches: any[]): any;
    /**
     * Applies the given patch to the given DID Document.
     */
    private static applyPatchToDidDocument;
    private static applyIetfJsonPatch;
    /**
     * Adds public keys to document.
     */
    private static addPublicKeys;
    /**
     * Removes public keys from document.
     */
    private static removePublicKeys;
    private static addServiceEndpoints;
    private static removeServiceEndpoints;
}
