/// <reference types="node" />
import { PublicKeyJwkSecp256k1, PublicKeyJwkEd25519, PrivateKeyJwkSecp256k1, PrivateKeyJwkEd25519, PrivateKeyJwk, PublicKeyJwk } from '@sidetree/common';
/**
 * Class containing reusable JWK operations.
 */
export default class Jwk {
    /**
     * Generates ED25519 key pair.
     * Mainly used for testing.
     * @returns [publicKey, privateKey]
     */
    static generateEd25519KeyPair(): Promise<[PublicKeyJwkEd25519, PrivateKeyJwkEd25519]>;
    static getBufferAtIndex(mnemonic: string, index: number): Promise<Buffer>;
    private static generateEd25519KeyPairFromMnemonic;
    /**
     * Generates SECP256K1 key pair.
     * Mainly used for testing.
     * @returns [publicKey, privateKey]
     */
    static generateSecp256k1KeyPair(): Promise<[PublicKeyJwkSecp256k1, PrivateKeyJwkSecp256k1]>;
    static generateJwkKeyPairFromMnemonic(keyType: string, mnemonic: string, index: number): Promise<[PublicKeyJwk, PrivateKeyJwk]>;
    private static generateSecp256k1KeyPairFromMnemonic;
    /**
     * Validates the given key is a public key in JWK format allowed by Sidetree.
     * @throws SidetreeError if given object is not a key in JWK format allowed by Sidetree.
     */
    static validatePublicJwk(jwk: any): void;
    /**
     * Gets the public key given the private ES256K key.
     * Mainly used for testing purposes.
     */
    static getCurve25519PublicKey(privateKey: PrivateKeyJwkEd25519): PublicKeyJwkEd25519;
}
