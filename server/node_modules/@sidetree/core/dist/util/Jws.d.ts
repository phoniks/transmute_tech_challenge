import { PublicKeyJwk, PrivateKeyJwk } from '@sidetree/common';
/**
 * Class containing reusable JWS operations.
 */
export default class Jws {
    /** Protected header. */
    readonly protected: string;
    /** Payload. */
    readonly payload: string;
    /** Signature. */
    readonly signature: string;
    /**
     * Constructs a JWS object.
     * @param compactJws Input should be a compact JWS string.
     */
    private constructor();
    /**
     * Converts this object to a compact JWS string.
     */
    toCompactJws(): string;
    /**
     * Verifies the JWS signature.
     * @returns true if signature is successfully verified, false otherwise.
     */
    verifySignature(publicKey: PublicKeyJwk): Promise<boolean>;
    /**
     * Verifies the JWS signature.
     * @returns true if signature is successfully verified, false otherwise.
     */
    static verifySignature(encodedProtectedHeader: string, encodedPayload: string, signature: string, publicKey: PublicKeyJwk): Promise<boolean>;
    /**
     * Verifies the compact JWS string using the given JWK key.
     * @returns true if signature is valid; else otherwise.
     */
    static verifyCompactJws(compactJws: string, jwk: PublicKeyJwk): Promise<boolean>;
    /**
     * Signs the given payload as a compact JWS string.
     * This is mainly used by tests to create valid test data.
     */
    static signAsCompactJws(payload: object, privateKey: PrivateKeyJwk, protectedHeader?: any): Promise<string>;
    /**
     * Parses the input as a `Jws` object.
     */
    static parseCompactJws(compactJws: any): Jws;
    /**
     * Creates a compact JWS string using the given input. No string validation is performed.
     */
    static createCompactJws(protectedHeader: string, payload: string, signature: string): string;
}
