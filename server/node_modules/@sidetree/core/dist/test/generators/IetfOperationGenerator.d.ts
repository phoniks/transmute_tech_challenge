/// <reference types="node" />
import { PublicKeyJwk, PublicKeyModel, OperationType, PrivateKeyJwk, PrivateKeyJwkEd25519 } from '@sidetree/common';
import CreateOperation from '../../CreateOperation';
import UpdateOperation from '../../UpdateOperation';
import RecoverOperation from '../../RecoverOperation';
import DeactivateOperation from '../../DeactivateOperation';
interface GeneratedRecoverOperationData {
    operationBuffer: Buffer;
    recoverOperation: RecoverOperation;
    recoveryPublicKey: PublicKeyJwk;
    recoveryPrivateKey: PrivateKeyJwk;
    signingPublicKey: PublicKeyModel;
    signingPrivateKey: PrivateKeyJwk;
    update_key: PublicKeyModel;
    updatePrivateKey: PrivateKeyJwk;
}
export default class IetfOperationGenerator {
    /**
     * Generates an create operation.
     */
    static generateCreateOperation(): Promise<{
        createOperation: CreateOperation;
        operationRequest: {
            type: OperationType;
            suffix_data: string;
            delta: string;
        };
        recoveryPublicKey: import("@sidetree/common").PublicKeyJwkEd25519;
        recoveryPrivateKey: PrivateKeyJwkEd25519;
        updatePublicKey: import("@sidetree/common").PublicKeyJwkEd25519;
        updatePrivateKey: PrivateKeyJwkEd25519;
        signingPublicKey: PublicKeyModel;
        signingPrivateKey: PrivateKeyJwk;
        nextUpdateRevealValueEncodedString: string;
    }>;
    /**
     * Generates an update operation that adds a new key.
     */
    static generateUpdateOperation(didUniqueSuffix: string, updatePublicKey: PublicKeyJwk, updatePrivateKey: PrivateKeyJwk): Promise<{
        updateOperation: UpdateOperation;
        operationBuffer: Buffer;
        additionalKeyId: string;
        additionalPublicKey: PublicKeyModel;
        additionalPrivateKey: PrivateKeyJwk;
        nextUpdateKey: any;
    }>;
    static generateBadUpdateOperation(didUniqueSuffix: string, updatePublicKey: PublicKeyJwk, updatePrivateKey: PrivateKeyJwk, oldDocument: any): Promise<{
        updateOperation: UpdateOperation;
        operationBuffer: Buffer;
        additionalKeyId: string;
        additionalPublicKey: PublicKeyModel;
        additionalPrivateKey: PrivateKeyJwk;
        nextUpdateKey: any;
    }>;
    /**
     * Generates a recover operation.
     */
    static generateRecoverOperation(didUniqueSuffix: string, recoveryPrivateKey: PrivateKeyJwk): Promise<GeneratedRecoverOperationData>;
    /**
     * Generates a Deactivate Operation data.
     */
    static createDeactivateOperation(didUniqueSuffix: string, recoveryPrivateKey: PrivateKeyJwk): Promise<{
        operationRequest: {
            type: OperationType;
            did_suffix: string;
            signed_data: string;
        };
        operationBuffer: Buffer;
        deactivateOperation: DeactivateOperation;
    }>;
}
export {};
