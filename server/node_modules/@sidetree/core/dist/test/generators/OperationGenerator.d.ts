/// <reference types="node" />
import { AnchoredOperationModel, PublicKeyJwk, OperationModel, OperationType, PrivateKeyJwk, PublicKeyModel, ServiceEndpointModel, PublicKeyPurpose, PrivateKeyJwkEd25519 } from '@sidetree/common';
import CreateOperation from '../../CreateOperation';
import DeactivateOperation from '../../DeactivateOperation';
import RecoverOperation from '../../RecoverOperation';
import UpdateOperation from '../../UpdateOperation';
interface AnchoredCreateOperationGenerationInput {
    transactionNumber: number;
    transactionTime: number;
    operationIndex: number;
}
interface RecoverOperationGenerationInput {
    didUniqueSuffix: string;
    recoveryPrivateKey: PrivateKeyJwk;
}
interface GeneratedRecoverOperationData {
    operationBuffer: Buffer;
    recoverOperation: RecoverOperation;
    recoveryPublicKey: PublicKeyJwk;
    recoveryPrivateKey: PrivateKeyJwk;
    signingPublicKey: PublicKeyModel;
    signingPrivateKey: PrivateKeyJwk;
    update_key: PublicKeyModel;
    updatePrivateKey: PrivateKeyJwk;
}
/**
 * A class that can generate valid operations.
 * Mainly useful for testing purposes.
 */
export default class OperationGenerator {
    /**
     * Generates random hash.
     */
    static generateRandomHash(): string;
    /**
     * Generates Ed25519 key pair to be used in an operation. If purpose not supplied, all purposes will be included
     * Mainly used for testing.
     * @returns [publicKey, privateKey]
     */
    static generateKeyPair(id: string, purpose?: PublicKeyPurpose[]): Promise<[PublicKeyModel, PrivateKeyJwk]>;
    /**
     * Generates an anchored create operation.
     */
    static generateAnchoredCreateOperation(input: AnchoredCreateOperationGenerationInput): Promise<{
        createOperation: CreateOperation;
        operationRequest: {
            type: OperationType;
            suffix_data: string;
            delta: string;
        };
        anchoredOperationModel: {
            type: OperationType;
            didUniqueSuffix: string;
            operationBuffer: Buffer;
            transactionNumber: number;
            transactionTime: number;
            operationIndex: number;
        };
        recoveryPublicKey: import("@sidetree/common").PublicKeyJwkEd25519;
        recoveryPrivateKey: PrivateKeyJwkEd25519;
        updatePublicKey: import("@sidetree/common").PublicKeyJwkEd25519;
        updatePrivateKey: PrivateKeyJwkEd25519;
        signingPublicKey: PublicKeyModel;
        signingPrivateKey: PrivateKeyJwk;
        nextUpdateRevealValueEncodedString: string;
    }>;
    /**
     * Generates an create operation.
     */
    static generateCreateOperation(): Promise<{
        createOperation: CreateOperation;
        operationRequest: {
            type: OperationType;
            suffix_data: string;
            delta: string;
        };
        recoveryPublicKey: import("@sidetree/common").PublicKeyJwkEd25519;
        recoveryPrivateKey: PrivateKeyJwkEd25519;
        updatePublicKey: import("@sidetree/common").PublicKeyJwkEd25519;
        updatePrivateKey: PrivateKeyJwkEd25519;
        signingPublicKey: PublicKeyModel;
        signingPrivateKey: PrivateKeyJwk;
        nextUpdateRevealValueEncodedString: string;
    }>;
    /**
     * Generates a recover operation.
     */
    static generateRecoverOperation(input: RecoverOperationGenerationInput): Promise<GeneratedRecoverOperationData>;
    /**
     * Generates an update operation that adds a new key.
     */
    static generateUpdateOperation(didUniqueSuffix: string, updatePublicKey: PublicKeyJwk, updatePrivateKey: PrivateKeyJwk): Promise<{
        updateOperation: UpdateOperation;
        operationBuffer: Buffer;
        additionalKeyId: string;
        additionalPublicKey: PublicKeyModel;
        additionalPrivateKey: PrivateKeyJwk;
        nextUpdateKey: any;
    }>;
    /**
     * Creates a named anchored operation model from `OperationModel`.
     */
    static createAnchoredOperationModelFromOperationModel(operationModel: OperationModel, transactionTime: number, transactionNumber: number, operationIndex: number): AnchoredOperationModel;
    /**
     * Generates a create operation request.
     */
    static generateCreateOperationRequest(recoveryPublicKey: PublicKeyJwk, updatePublicKey: PublicKeyJwk, otherPublicKeys: PublicKeyModel[], service_endpoints?: ServiceEndpointModel[]): Promise<{
        type: OperationType;
        suffix_data: string;
        delta: string;
    }>;
    /**
     * Generates an update operation request.
     */
    static generateUpdateOperationRequest(didUniqueSuffix?: string): Promise<{
        request: {
            type: OperationType;
            did_suffix: string;
            delta: string;
            signed_data: string;
        };
        buffer: Buffer;
        updateOperation: UpdateOperation;
    }>;
    /**
     * Creates an update operation request.
     */
    static createUpdateOperationRequest(didUniqueSuffix: string, updatePublicKey: PublicKeyJwk, updatePrivateKey: PrivateKeyJwk, nextUpdateCommitmentHash: string, patches: any): Promise<{
        type: OperationType;
        did_suffix: string;
        delta: string;
        signed_data: string;
    }>;
    /**
     * Generates a recover operation request.
     */
    static generateRecoverOperationRequest(didUniqueSuffix: string, recoveryPrivateKey: PrivateKeyJwk, newRecoveryPublicKey: PublicKeyJwk, newSigningPublicKey: PublicKeyModel, service_endpoints?: ServiceEndpointModel[], public_keys?: PublicKeyModel[]): Promise<{
        type: OperationType;
        did_suffix: string;
        signed_data: string;
        delta: string;
    }>;
    /**
     * Creates a recover operation request.
     */
    static createRecoverOperationRequest(didUniqueSuffix: string, recoveryPrivateKey: PrivateKeyJwk, newRecoveryPublicKey: PublicKeyJwk, nextUpdateCommitmentHash: string, document: any): Promise<{
        type: OperationType;
        did_suffix: string;
        signed_data: string;
        delta: string;
    }>;
    /**
     * Generates a deactivate operation request.
     */
    static createDeactivateOperationRequest(didUniqueSuffix: string, recoveryPrivateKey: PrivateKeyJwk): Promise<{
        type: OperationType;
        did_suffix: string;
        signed_data: string;
    }>;
    /**
     * Generates a create operation request buffer.
     * @param nextRecoveryCommitmentHash The encoded commitment hash for the next recovery.
     * @param nextUpdateCommitmentHash The encoded commitment hash for the next update.
     */
    static generateCreateOperationBuffer(recoveryPublicKey: PublicKeyJwk, signingPublicKey: PublicKeyModel, service_endpoints?: ServiceEndpointModel[]): Promise<Buffer>;
    /**
     * Creates an update operation for adding a key.
     */
    static createUpdateOperationRequestForAddingAKey(didUniqueSuffix: string, updatePublicKey: PublicKeyJwk, updatePrivateKey: PrivateKeyJwk, newPublicKey: PublicKeyModel, nextUpdateCommitmentHash: string): Promise<{
        type: OperationType;
        did_suffix: string;
        delta: string;
        signed_data: string;
    }>;
    /**
     * Creates an update operation for adding and/or removing hub service endpoints.
     */
    static createUpdateOperationRequestForHubEndpoints(didUniqueSuffix: string, updatePublicKey: any, updatePrivateKey: PrivateKeyJwk, nextUpdateCommitmentHash: string, idOfServiceEndpointToAdd: string | undefined, idsOfServiceEndpointToRemove: string[]): Promise<{
        type: OperationType;
        did_suffix: string;
        delta: string;
        signed_data: string;
    }>;
    /**
     * Signs the given payload as a ed25519 compact JWS.
     */
    static signUsingEd25519(payload: any, privateKey: PrivateKeyJwk): Promise<string>;
    /**
     * Generates a Deactivate Operation data.
     */
    static createDeactivateOperation(didUniqueSuffix: string, recoveryPrivateKey: PrivateKeyJwk): Promise<{
        operationRequest: {
            type: OperationType;
            did_suffix: string;
            signed_data: string;
        };
        operationBuffer: Buffer;
        deactivateOperation: DeactivateOperation;
    }>;
    /**
     * Generates an array of service endpoints with specified ids
     * @param ids the id field in endpoint.
     */
    static generateServiceEndpoints(ids: string[]): any[];
}
export {};
