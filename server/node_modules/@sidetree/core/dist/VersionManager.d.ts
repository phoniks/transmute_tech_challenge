import { AbstractVersionMetadata, Config, IBatchWriter, IBlockchain, ICas, IOperationProcessor, IOperationStore, IRequestHandler, ITransactionProcessor, ITransactionSelector, ITransactionStore, IVersionManager, IVersionMetadataFetcher, ProtocolVersionModel, IOperationQueue } from '@sidetree/common';
import DownloadManager from './DownloadManager';
import Resolver from './Resolver';
/**
 * The class that handles the loading of different versions of protocol codebase.
 */
export default class VersionManager implements IVersionManager, IVersionMetadataFetcher {
    private config;
    allSupportedHashAlgorithms: number[];
    private protocolVersionsReverseSorted;
    private batchWriters;
    private operationProcessors;
    private operationQueues;
    private requestHandlers;
    private transactionProcessors;
    private transactionSelectors;
    private versionMetadatas;
    constructor(config: Config, protocolVersions: ProtocolVersionModel[]);
    /**
     * Loads all the versions of the protocol codebase.
     */
    initialize(blockchain: IBlockchain, cas: ICas, downloadManager: DownloadManager, operationStore: IOperationStore, resolver: Resolver, transactionStore: ITransactionStore): Promise<void>;
    /**
     * Gets the corresponding version of the `IBatchWriter` based on the given blockchain time.
     */
    getBatchWriter(blockchainTime: number): IBatchWriter;
    /**
     * Gets the corresponding version of the `IOperationProcessor` based on the given blockchain time.
     */
    getOperationProcessor(blockchainTime: number): IOperationProcessor;
    /**
     * Gets the corresponding version of the `IRequestHandler` based on the given blockchain time.
     */
    getRequestHandler(blockchainTime: number): IRequestHandler;
    /**
     * Gets the corresponding version of the `TransactionProcessor` based on the given blockchain time.
     */
    getTransactionProcessor(blockchainTime: number): ITransactionProcessor;
    /**
     * Gets the corresponding version of the `TransactionSelector` based on the given blockchain time.
     */
    getTransactionSelector(blockchainTime: number): ITransactionSelector;
    getVersionMetadata(blockchainTime: number): AbstractVersionMetadata;
    getOperationQueue(blockchainTime: number): IOperationQueue;
    /**
     * Gets the corresponding protocol version string given the blockchain time.
     */
    private getVersionString;
    private loadDefaultExportsForVersion;
}
