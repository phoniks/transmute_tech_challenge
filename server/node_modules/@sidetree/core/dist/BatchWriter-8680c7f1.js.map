{"version":3,"file":"BatchWriter-8680c7f1.js","sources":["../src/LogColor.ts","../src/write/BatchWriter.ts"],"sourcesContent":["/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport chalk from 'chalk';\n\n/**\n * Abstraction for colored logs.\n */\nexport default class LogColor {\n  /** Method for logging in light blue. */\n  public static lightBlue = chalk.hex('#75b0eb');\n\n  /** Method for logging in green. */\n  public static green = chalk.green;\n\n  /** Method for logging in yellow. */\n  public static yellow = chalk.yellow;\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/master/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnchoredData,\n  AnchoredDataSerializer,\n  IBatchWriter,\n  IBlockchain,\n  ICas,\n  IOperationQueue,\n  OperationType,\n  protocolParameters,\n  IVersionMetadataFetcher,\n  ValueTimeLockModel,\n} from '@sidetree/common';\nimport CreateOperation from '../CreateOperation';\nimport DeactivateOperation from '../DeactivateOperation';\nimport LogColor from '../LogColor';\nimport Operation from '../Operation';\nimport RecoverOperation from '../RecoverOperation';\nimport UpdateOperation from '../UpdateOperation';\nimport AnchorFile from './AnchorFile';\nimport ChunkFile from './ChunkFile';\nimport MapFile from './MapFile';\nimport FeeManager from '../FeeManager';\nimport ValueTimeLockVerifier from '../ValueTimeLockVerifier';\n\n/**\n * Implementation of the `IBatchWriter`.\n */\nexport default class BatchWriter implements IBatchWriter {\n  public constructor(\n    private operationQueue: IOperationQueue,\n    private blockchain: IBlockchain,\n    private cas: ICas,\n    private versionMetadataFetcher: IVersionMetadataFetcher\n  ) {}\n\n  public async write(): Promise<void> {\n    const normalizedFee = await this.blockchain.getFee(\n      this.blockchain.approximateTime.time\n    );\n    const currentLock = await this.blockchain.getWriterValueTimeLock();\n    const numberOfOpsAllowed = this.getNumberOfOperationsAllowed(currentLock);\n\n    // Get the batch of operations to be anchored on the blockchain.\n    const queuedOperations = await this.operationQueue.peek(numberOfOpsAllowed);\n    const numberOfOperations = queuedOperations.length;\n\n    // Do nothing if there is nothing to batch together.\n    if (queuedOperations.length === 0) {\n      console.info(`No queued operations to batch.`);\n      return;\n    }\n\n    console.info(\n      LogColor.lightBlue(\n        `Batch size = ${LogColor.green(`${numberOfOperations}`)}`\n      )\n    );\n\n    const operationModels = await Promise.all(\n      queuedOperations.map(async (queuedOperation) =>\n        Operation.parse(queuedOperation.operationBuffer)\n      )\n    );\n    const createOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Create\n    ) as CreateOperation[];\n    const recoverOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Recover\n    ) as RecoverOperation[];\n    const updateOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Update\n    ) as UpdateOperation[];\n    const deactivateOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Deactivate\n    ) as DeactivateOperation[];\n\n    // Create the chunk file buffer from the operation models.\n    // NOTE: deactivate operations don't have delta.\n    const chunkFileBuffer = await ChunkFile.createBuffer(\n      createOperations,\n      recoverOperations,\n      updateOperations\n    );\n\n    // Write the chunk file to content addressable store.\n    const chunkFileHash = await this.cas.write(chunkFileBuffer);\n    console.info(\n      LogColor.lightBlue(\n        `Wrote chunk file ${LogColor.green(\n          chunkFileHash\n        )} to content addressable store.`\n      )\n    );\n\n    // Write the map file to content addressable store.\n    const mapFileBuffer = await MapFile.createBuffer(\n      chunkFileHash,\n      updateOperations\n    );\n    const mapFileHash = await this.cas.write(mapFileBuffer);\n    console.info(\n      LogColor.lightBlue(\n        `Wrote map file ${LogColor.green(\n          mapFileHash\n        )} to content addressable store.`\n      )\n    );\n\n    // Write the anchor file to content addressable store.\n    const writerLockId = currentLock ? currentLock.identifier : undefined;\n    const anchorFileBuffer = await AnchorFile.createBuffer(\n      writerLockId,\n      mapFileHash,\n      createOperations,\n      recoverOperations,\n      deactivateOperations\n    );\n    const anchorFileHash = await this.cas.write(anchorFileBuffer);\n    console.info(\n      LogColor.lightBlue(\n        `Wrote anchor file ${LogColor.green(\n          anchorFileHash\n        )} to content addressable store.`\n      )\n    );\n\n    // Anchor the data to the blockchain\n    const dataToBeAnchored: AnchoredData = {\n      anchorFileHash,\n      numberOfOperations,\n    };\n\n    const stringToWriteToBlockchain = AnchoredDataSerializer.serialize(\n      dataToBeAnchored\n    );\n    const fee = FeeManager.computeMinimumTransactionFee(\n      normalizedFee,\n      numberOfOperations\n    );\n    console.info(\n      LogColor.lightBlue(\n        `Writing data to blockchain: ${LogColor.green(\n          stringToWriteToBlockchain\n        )} with minimum fee of: ${LogColor.green(`${fee}`)}`\n      )\n    );\n\n    await this.blockchain.write(stringToWriteToBlockchain, fee);\n\n    // Remove written operations from queue after batch writing has completed successfully.\n    await this.operationQueue.dequeue(queuedOperations.length);\n  }\n\n  private getNumberOfOperationsAllowed(\n    valueTimeLock: ValueTimeLockModel | undefined\n  ): number {\n    const maxNumberOfOpsAllowedByProtocol =\n      protocolParameters.maxOperationsPerBatch;\n    const maxNumberOfOpsAllowedByLock = ValueTimeLockVerifier.calculateMaxNumberOfOperationsAllowed(\n      valueTimeLock,\n      this.versionMetadataFetcher\n    );\n\n    if (maxNumberOfOpsAllowedByLock > maxNumberOfOpsAllowedByProtocol) {\n      // tslint:disable-next-line: max-line-length\n      console.info(\n        `Maximum number of operations allowed by value time lock: ${maxNumberOfOpsAllowedByLock}; Maximum number of operations allowed by protocol: ${maxNumberOfOpsAllowedByProtocol}`\n      );\n    }\n\n    return Math.min(\n      maxNumberOfOpsAllowedByLock,\n      maxNumberOfOpsAllowedByProtocol\n    );\n  }\n}\n"],"names":["LogColor","chalk","hex","green","yellow","BatchWriter","operationQueue","blockchain","cas","versionMetadataFetcher","write","getFee","approximateTime","time","normalizedFee","getWriterValueTimeLock","currentLock","numberOfOpsAllowed","getNumberOfOperationsAllowed","peek","queuedOperations","numberOfOperations","length","console","info","lightBlue","Promise","all","map","queuedOperation","Operation","parse","operationBuffer","operationModels","createOperations","filter","operation","type","OperationType","Create","recoverOperations","Recover","updateOperations","Update","deactivateOperations","Deactivate","ChunkFile","createBuffer","chunkFileBuffer","chunkFileHash","MapFile","mapFileBuffer","mapFileHash","writerLockId","identifier","undefined","AnchorFile","anchorFileBuffer","anchorFileHash","dataToBeAnchored","stringToWriteToBlockchain","AnchoredDataSerializer","serialize","fee","FeeManager","computeMinimumTransactionFee","dequeue","valueTimeLock","maxNumberOfOpsAllowedByProtocol","protocolParameters","maxOperationsPerBatch","maxNumberOfOpsAllowedByLock","ValueTimeLockVerifier","calculateMaxNumberOfOperationsAllowed","Math","min"],"mappings":"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"}