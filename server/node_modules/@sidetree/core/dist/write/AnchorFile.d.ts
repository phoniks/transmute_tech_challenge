/// <reference types="node" />
import { AnchorFileModel } from '@sidetree/common';
import CreateOperation from '../CreateOperation';
import DeactivateOperation from '../DeactivateOperation';
import RecoverOperation from '../RecoverOperation';
/**
 * Class containing Anchor File related operations.
 */
export default class AnchorFile {
    readonly model: AnchorFileModel;
    readonly didUniqueSuffixes: string[];
    readonly createOperations: CreateOperation[];
    readonly recoverOperations: RecoverOperation[];
    readonly deactivateOperations: DeactivateOperation[];
    /**
     * Class that represents an anchor file.
     * NOTE: this class is introduced as an internal structure in replacement to `AnchorFileModel`
     * to keep useful metadata so that repeated computation can be avoided.
     */
    private constructor();
    /**
     * Parses and validates the given anchor file buffer.
     * @throws `SidetreeError` if failed parsing or validation.
     */
    static parse(anchorFileBuffer: Buffer): Promise<AnchorFile>;
    /**
     * Creates an `AnchorFileModel`.
     */
    static createModel(writerLockId: string | undefined, mapFileHash: string, createOperationArray: CreateOperation[], recoverOperationArray: RecoverOperation[], deactivateOperationArray: DeactivateOperation[]): Promise<AnchorFileModel>;
    /**
     * Creates an anchor file buffer.
     */
    static createBuffer(writerLockId: string | undefined, mapFileHash: string, createOperations: CreateOperation[], recoverOperations: RecoverOperation[], deactivateOperations: DeactivateOperation[]): Promise<Buffer>;
}
