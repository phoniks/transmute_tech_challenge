import { IBlockchain, IOperationStore, ITransactionProcessor, IVersionMetadataFetcher, TransactionModel } from '@sidetree/common';
import DownloadManager from './DownloadManager';
/**
 * Implementation of the `ITransactionProcessor`.
 */
export default class TransactionProcessor implements ITransactionProcessor {
    private downloadManager;
    private operationStore;
    private blockchain;
    private versionMetadataFetcher;
    constructor(downloadManager: DownloadManager, operationStore: IOperationStore, blockchain: IBlockchain, versionMetadataFetcher: IVersionMetadataFetcher);
    processTransaction(transaction: TransactionModel): Promise<boolean>;
    /**
     * @param batchSize The size of the batch in number of operations.
     */
    private downloadAndVerifyAnchorFile;
    /**
     * NOTE: In order to be forward-compatable with data-pruning feature,
     * we must continue to process the operations declared in the anchor file even if the map/chunk file is invalid.
     * This means that this method MUST ONLY throw errors that are retryable (e.g. network or file not found errors),
     * It is a design choice to hide the complexity of map file downloading and construction within this method,
     * instead of throwing errors and letting the caller handle them.
     * @returns `MapFile` if downloaded file is valid; `undefined` otherwise.
     * @throws SidetreeErrors that are retryable.
     */
    private downloadAndVerifyMapFile;
    /**
     * NOTE: In order to be forward-compatable with data-pruning feature,
     * we must continue to process the operations declared in the anchor file even if the map/chunk file is invalid.
     * This means that this method MUST ONLY throw errors that are retryable (e.g. network or file not found errors),
     * It is a design choice to hide the complexity of chunk file downloading and construction within this method,
     * instead of throwing errors and letting the caller handle them.
     * @returns `ChunkFileModel` if downloaded file is valid; `undefined` otherwise.
     * @throws SidetreeErrors that are retryable.
     */
    private downloadAndVerifyChunkFile;
    private composeAnchoredOperationModels;
    private downloadFileFromCas;
}
