/// <reference types="node" />
import { OperationType, DeltaModel, OperationModel } from '@sidetree/common';
interface SuffixDataModel {
    delta_hash: string;
    recovery_commitment: string;
}
/**
 * A class that represents a create operation.
 */
export default class CreateOperation implements OperationModel {
    /** The original request buffer sent by the requester. */
    readonly operationBuffer: Buffer;
    /** The unique suffix of the DID. */
    readonly didUniqueSuffix: string;
    /** The type of operation. */
    readonly type: OperationType;
    /** Data used to generate the unique DID suffix. */
    readonly suffixData: SuffixDataModel;
    /** Delta. */
    readonly delta: DeltaModel | undefined;
    /** Encoded string of the suffix data. */
    readonly encodedSuffixData: string;
    /** Encoded string of the delta. */
    readonly encodedDelta: string | undefined;
    /**
     * NOTE: should only be used by `parse()` and `parseObject()` else the contructed instance could be invalid.
     */
    private constructor();
    /**
     * Computes the DID unique suffix given the encoded suffix data string.
     */
    private static computeDidUniqueSuffix;
    /**
     * Parses the given input as a create operation entry in the anchor file.
     */
    static parseOperationFromAnchorFile(input: any): Promise<CreateOperation>;
    /**
     * Parses the given buffer as a `CreateOperation`.
     */
    static parse(operationBuffer: Buffer): Promise<CreateOperation>;
    /**
     * Parses the given operation object as a `CreateOperation`.
     * The `operationBuffer` given is assumed to be valid and is assigned to the `operationBuffer` directly.
     * NOTE: This method is purely intended to be used as an optimization method over the `parse` method in that
     * JSON parsing is not required to be performed more than once when an operation buffer of an unknown operation type is given.
     * @param anchorFileMode If set to true, then `delta` and `type` properties are expected to be absent.
     */
    static parseObject(operationObject: any, operationBuffer: Buffer, anchorFileMode: boolean): Promise<CreateOperation>;
    private static parseSuffixData;
}
export {};
