{"version":3,"file":"did-key-x25519.cjs.development.js","sources":["../src/keyUtils.ts","../src/X25519KeyPair.ts","../src/driver.ts"],"sourcesContent":["import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\nimport canonicalize from 'canonicalize';\n\nexport const getKid = (jwk: any) => {\n  const copy = { ...jwk } as any;\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  const digest = crypto\n    .createHash('sha256')\n    .update(canonicalize(copy))\n    .digest();\n  return base64url.encode(Buffer.from(digest));\n};\n\nexport const privateKeyJwkFromPrivateKeyBase58 = (\n  publicKeyBase58: string,\n  privateKeybase58: string\n) => {\n  const publicKeyBytes = bs58.decode(publicKeyBase58);\n  const privateKeyBytes = bs58.decode(privateKeybase58);\n  const _jwk = {\n    kty: 'OKP',\n    crv: 'X25519',\n    d: base64url.encode(privateKeyBytes),\n    x: base64url.encode(publicKeyBytes),\n  };\n  const kid = getKid(_jwk);\n  return {\n    ..._jwk,\n    kid,\n  };\n};\n\nexport const publicKeyJwkFromPublicKeyBase58 = (publicKeyBase58: string) => {\n  const _jwk = {\n    kty: 'OKP',\n    crv: 'X25519',\n    x: base64url.encode(bs58.decode(publicKeyBase58)),\n  };\n  const kid = getKid(_jwk);\n  return {\n    ..._jwk,\n    kid,\n  };\n};\n\nexport const privateKeyHexFromPrivateKeyBase58 = (privateKeyBase58: string) => {\n  return Buffer.from(bs58.decode(privateKeyBase58)).toString('hex');\n};\n\nexport const publicKeyHexFromPublicKeyBase58 = (publicKeyBase58: string) => {\n  return Buffer.from(bs58.decode(publicKeyBase58)).toString('hex');\n};\n\nexport const privateKeyBase58FromPrivateKeyJwk = (jwk: any) => {\n  return bs58.encode(base64url.toBuffer(jwk.d));\n};\n\nexport const publicKeyBase58FromPublicKeyJwk = (jwk: any) => {\n  return bs58.encode(base64url.toBuffer(jwk.x));\n};\n\nexport const privateKeyBase58FromPrivateKeyHex = (privateKeyHex: string) => {\n  return bs58.encode(Buffer.from(privateKeyHex, 'hex'));\n};\n\nexport const publicKeyBase58FromPublicKeyHex = (publicKeyHex: string) => {\n  return bs58.encode(Buffer.from(publicKeyHex, 'hex'));\n};\n","import bs58 from 'bs58';\n\nimport {\n  convertPublicKeyToX25519,\n  convertSecretKeyToX25519,\n} from '@stablelib/ed25519';\nimport * as x25519 from '@stablelib/x25519';\nimport * as keyUtils from './keyUtils';\n\nimport base64url from 'base64url';\nimport crypto from 'crypto';\n\nimport * as common from '@transmute/did-key-common';\n\nimport {\n  deriveKey,\n  getEpkGenerator,\n  KeyEncryptionKey,\n} from '@transmute/did-key-cipher';\n\nconst KEY_TYPE = 'X25519KeyAgreementKey2019';\n\n@common.types.staticImplements<common.types.KeyAgreementKeyPairClass>()\nexport class X25519KeyPair implements common.types.KeyPairInstance {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  public static JWE_ALG: common.types.ECDH_ES_A256KW = 'ECDH-ES+A256KW';\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (keypair as common.types.KeyPairJwk).publicKeyJwk\n        )\n      );\n    }\n\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xec;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static async generate(options: common.types.KeyPairGenerateOptions) {\n    let key;\n\n    key = x25519.generateKeyPair({\n      isAvailable: true,\n      randomBytes: options.secureRandom,\n    });\n\n    if (!key) {\n      throw new Error('options.seed or options.secureRandom is required.');\n    }\n\n    const publicKeyBase58 = bs58.encode(key.publicKey);\n    const privateKeyBase58 = bs58.encode(key.secretKey);\n\n    const did = `did:key:${X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    return new X25519KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    } as common.types.KeyPairBase58);\n  }\n\n  static async generateEphemeralKeyPair(): Promise<common.types.EpkResult> {\n    return getEpkGenerator(X25519KeyPair, {\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    })();\n  }\n\n  static async kekFromEphemeralPeer({\n    keyAgreementKey,\n    epk,\n  }: common.types.KeyEncryptionKeyFromEphemeralPublicKeyOptions) {\n    if (!(epk && typeof epk === 'object')) {\n      throw new TypeError('\"epk\" must be an object.');\n    }\n\n    // decode public key material\n    const publicKey = base64url.toBuffer(epk.x);\n\n    // convert to LD key for Web KMS\n    const ephemeralPublicKey = {\n      type: KEY_TYPE,\n      publicKeyBase58: bs58.encode(publicKey),\n    };\n\n    // safe to use IDs like in rfc7518 or does\n    // https://tools.ietf.org/html/rfc7748#section-7 pose any issues?\n\n    // \"Party U Info\"\n    const producerInfo = publicKey;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(keyAgreementKey.id);\n    // converts keys again....\n    // base58 encoding should only be used at the network / serialization boundary.\n    const secret = await (keyAgreementKey as common.types.KeyAgreementKeyPairInstance).deriveSecret(\n      {\n        publicKey: ephemeralPublicKey,\n      } as any\n    );\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n    };\n  }\n\n  static async kekFromStaticPeer({\n    ephemeralKeyPair,\n    staticPublicKey,\n  }: common.types.KeyEncryptionKeyFromStaticPublicKeyOptions) {\n    // TODO: consider accepting JWK format for `staticPublicKey` not just LD key\n    if (\n      !(\n        staticPublicKey.type === 'X25519KeyAgreementKey2019' ||\n        staticPublicKey.type === 'JsonWebKey2020'\n      )\n    ) {\n      throw new Error(\n        `\"staticPublicKey.type\" must be \"X25519KeyAgreementKey2019\".`\n      );\n    }\n\n    const epkPair = await X25519KeyPair.from(ephemeralKeyPair.keypair);\n\n    // \"Party U Info\"\n    const producerInfo = epkPair.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(staticPublicKey.id);\n\n    const secret = await epkPair.deriveSecret({\n      publicKey: staticPublicKey,\n    } as any);\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n      epk: ephemeralKeyPair.epk,\n      apu: base64url.encode(producerInfo),\n      apv: base64url.encode(consumerInfo as any),\n    };\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n    if (buffer[0] === 0xec && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${X25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${X25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new X25519KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      } as common.types.KeyPairBase58);\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  static fromEdKeyPair(ed25519KeyPair: common.types.KeyPairBase58) {\n    let publicKeyBase58;\n    let privateKeyBase58;\n\n    if (ed25519KeyPair.publicKeyBase58) {\n      publicKeyBase58 = bs58.encode(\n        convertPublicKeyToX25519(bs58.decode(ed25519KeyPair.publicKeyBase58))\n      );\n    }\n\n    if (ed25519KeyPair.privateKeyBase58) {\n      privateKeyBase58 = bs58.encode(\n        convertSecretKeyToX25519(bs58.decode(ed25519KeyPair.privateKeyBase58))\n      );\n    }\n\n    return new X25519KeyPair({\n      controller: ed25519KeyPair.controller,\n      publicKeyBase58,\n      privateKeyBase58,\n    } as common.types.KeyPairBase58);\n  }\n\n  static from(options: common.types.KeyPairBase58 | common.types.KeyPairJwk) {\n    let privateKeyBase58;\n    let publicKeyBase58;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      publicKeyBase58 = (options as common.types.KeyPairBase58).publicKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      privateKeyBase58 = (options as common.types.KeyPairBase58)\n        .privateKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairJwk).privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyJwk(\n        (options as common.types.KeyPairJwk).privateKeyJwk\n      );\n    }\n\n    if ((options as common.types.KeyPairJwk).publicKeyJwk) {\n      publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyJwk(\n        (options as common.types.KeyPairJwk).publicKeyJwk\n      );\n    }\n\n    return new X25519KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  constructor(options: common.types.KeyPairJwk | common.types.KeyPairBase58) {\n    this.type = 'X25519KeyAgreementKey2019';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      this.publicKeyBuffer = Buffer.from(\n        bs58.decode((options as common.types.KeyPairBase58).publicKeyBase58)\n      );\n    } else if ((options as common.types.JsonWebKeyPair).publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from(\n        bs58.decode(\n          keyUtils.publicKeyBase58FromPublicKeyJwk(\n            (options as common.types.JsonWebKeyPair).publicKeyJwk\n          )\n        )\n      );\n    } else {\n      throw new Error(\n        'X25519KeyPair requires publicKeyBase58 or publicKeyJwk, received none.'\n      );\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      this.privateKeyBuffer = Buffer.from(\n        bs58.decode((options as common.types.KeyPairBase58).privateKeyBase58)\n      );\n    }\n\n    if ((options as common.types.JsonWebKeyPair).privateKeyJwk) {\n      this.privateKeyBuffer = Buffer.from(\n        bs58.decode(\n          keyUtils.privateKeyBase58FromPrivateKeyJwk(\n            (options as common.types.JsonWebKeyPair).privateKeyJwk\n          )\n        )\n      );\n    }\n\n    if (!this.id) {\n      this.id = `#${this.fingerprint()}`;\n    }\n  }\n\n  fingerprint() {\n    return X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n\n  verifyFingerprint(fingerprint: any) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n    let publicKeyBuffer = this.publicKeyBuffer;\n\n    // validate the first two multicodec bytes 0xec01\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'ec01' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  toKeyPair(_private: boolean = false): common.types.LinkedDataKeyPair {\n    let kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (_private) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(_private: boolean = false): common.types.JsonWebKeyPair {\n    let kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk(),\n    };\n    delete kp.publicKeyJwk.kid;\n    if (_private) {\n      kp.privateKeyJwk = this.toJwk(true);\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n\n  toJwk(_private: boolean = false) {\n    const publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    if (_private) {\n      return keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        publicKeyBase58,\n        bs58.encode(this.privateKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyBase58(publicKeyBase58);\n  }\n\n  deriveSecret(options: common.types.DeriveSecretOptions) {\n    let remotePubkeyBytes;\n\n    const { publicKey } = options;\n\n    if ((publicKey as any).publicKeyBase58) {\n      remotePubkeyBytes = bs58.decode(\n        (publicKey as common.types.LinkedDataKeyPair).publicKeyBase58\n      );\n    } else if ((publicKey as any).publicKeyJwk) {\n      remotePubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (publicKey as common.types.JsonWebKeyPair).publicKeyJwk\n        )\n      );\n    }\n\n    const privateKeyBytes = this.privateKeyBuffer as Buffer;\n\n    const scalarMultipleResult = x25519.sharedKey(\n      new Uint8Array(privateKeyBytes),\n      new Uint8Array(remotePubkeyBytes),\n      true\n    );\n\n    return scalarMultipleResult;\n  }\n}\n","import { X25519KeyPair } from './X25519KeyPair';\nimport { getResolve, getGet } from '@transmute/did-key-common';\n\nexport const resolve = getResolve(X25519KeyPair);\nexport const get = getGet(resolve);\n"],"names":["getKid","jwk","copy","d","kid","alg","digest","crypto","createHash","update","canonicalize","base64url","encode","Buffer","from","privateKeyJwkFromPrivateKeyBase58","publicKeyBase58","privateKeybase58","publicKeyBytes","bs58","decode","privateKeyBytes","_jwk","kty","crv","x","publicKeyJwkFromPublicKeyBase58","privateKeyHexFromPrivateKeyBase58","privateKeyBase58","toString","publicKeyHexFromPublicKeyBase58","privateKeyBase58FromPrivateKeyJwk","toBuffer","publicKeyBase58FromPublicKeyJwk","privateKeyBase58FromPrivateKeyHex","privateKeyHex","publicKeyBase58FromPublicKeyHex","publicKeyHex","KEY_TYPE","X25519KeyPair","options","type","id","controller","publicKeyBuffer","publicKeyJwk","keyUtils","Error","privateKeyBuffer","privateKeyJwk","fingerprint","fingerprintFromPublicKey","keypair","pubkeyBytes","buffer","Uint8Array","length","set","generate","key","x25519","isAvailable","randomBytes","secureRandom","publicKey","secretKey","did","X25519KeyPair_1","keyId","generateEphemeralKeyPair","getEpkGenerator","kekFromEphemeralPeer","keyAgreementKey","epk","TypeError","ephemeralPublicKey","producerInfo","consumerInfo","deriveSecret","secret","deriveKey","keyData","KeyEncryptionKey","createKek","kek","kekFromStaticPeer","ephemeralKeyPair","staticPublicKey","epkPair","apu","apv","fromFingerprint","substr","slice","fromEdKeyPair","ed25519KeyPair","convertPublicKeyToX25519","convertSecretKeyToX25519","verifyFingerprint","error","valid","fingerprintBuffer","e","equals","toKeyPair","_private","kp","toJsonWebKeyPair","toJwk","remotePubkeyBytes","scalarMultipleResult","common","staticImplements","resolve","getResolve","get","getGet"],"mappings":"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"}