/// <reference types="node" />
import * as common from '@transmute/did-key-common';
import { KeyEncryptionKey } from '@transmute/did-key-cipher';
export declare class X25519KeyPair implements common.types.KeyPairInstance {
    id: string;
    type: string;
    controller: string;
    publicKeyBuffer: Buffer;
    privateKeyBuffer?: Buffer;
    static JWE_ALG: common.types.ECDH_ES_A256KW;
    static fingerprintFromPublicKey(keypair: common.types.KeyPairJwk | common.types.KeyPairBase58): string;
    static generate(options: common.types.KeyPairGenerateOptions): Promise<X25519KeyPair>;
    static generateEphemeralKeyPair(): Promise<common.types.EpkResult>;
    static kekFromEphemeralPeer({ keyAgreementKey, epk, }: common.types.KeyEncryptionKeyFromEphemeralPublicKeyOptions): Promise<{
        kek: KeyEncryptionKey;
    }>;
    static kekFromStaticPeer({ ephemeralKeyPair, staticPublicKey, }: common.types.KeyEncryptionKeyFromStaticPublicKeyOptions): Promise<{
        kek: KeyEncryptionKey;
        epk: any;
        apu: any;
        apv: any;
    }>;
    static fromFingerprint({ fingerprint }: any): X25519KeyPair;
    static fromEdKeyPair(ed25519KeyPair: common.types.KeyPairBase58): X25519KeyPair;
    static from(options: common.types.KeyPairBase58 | common.types.KeyPairJwk): X25519KeyPair;
    constructor(options: common.types.KeyPairJwk | common.types.KeyPairBase58);
    fingerprint(): string;
    verifyFingerprint(fingerprint: any): {
        error: any;
        valid: boolean;
    } | {
        valid: true;
        error?: undefined;
    };
    toKeyPair(_private?: boolean): common.types.LinkedDataKeyPair;
    toJsonWebKeyPair(_private?: boolean): common.types.JsonWebKeyPair;
    toJwk(_private?: boolean): {
        kid: any;
        kty: string;
        crv: string;
        x: any;
    };
    deriveSecret(options: common.types.DeriveSecretOptions): Uint8Array;
}
