{"version":3,"file":"did-key-secp256k1.esm.js","sources":["../src/keyUtils.ts","../src/ES256K.ts","../src/Secp256k1KeyPair.ts","../src/driver.ts"],"sourcesContent":["import keyto from '@trust/keyto';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport canonicalize from 'canonicalize';\n\nconst compressedHexEncodedPublicKeyLength = 66;\n\n/** Secp256k1 Private Key  */\nexport interface ISecp256k1PrivateKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** private point */\n  d: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/** Secp256k1 Public Key  */\nexport interface ISecp256k1PublicKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/**\n * Example\n * ```js\n * {\n *  kty: 'EC',\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'\n * }\n * ```\n * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on Jwk.\n */\nexport const getKid = (\n  jwk: ISecp256k1PrivateKeyJwk | ISecp256k1PublicKeyJwk\n) => {\n  const copy = { ...jwk } as any;\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  const digest = crypto\n    .createHash('sha256')\n    .update(canonicalize(copy))\n    .digest();\n\n  return base64url.encode(Buffer.from(digest));\n};\n\n/** convert compressed hex encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyHex = (privateKeyHex: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyHex, 'blk').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert compressed hex encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyHex = (publicKeyHex: string) => {\n  let key = publicKeyHex;\n  if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {\n    const keyBin = secp256k1.publicKeyConvert(\n      Buffer.from(publicKeyHex, 'hex'),\n      false\n    );\n    key = Buffer.from(keyBin).toString('hex');\n  }\n  const jwk = {\n    ...keyto.from(key, 'blk').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyPem = (privateKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyPem, 'pem').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  // console.log(jwk);\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyPem = (publicKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(publicKeyPem, 'pem').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert jwk to hex encoded private key */\nexport const privateKeyHexFromJwk = (jwk: ISecp256k1PrivateKeyJwk) =>\n  keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'private');\n\n/** convert jwk to hex encoded public key */\nexport const publicKeyHexFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const uncompressedPublicKey = keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'public');\n\n  const compressed = secp256k1.publicKeyConvert(\n    Buffer.from(uncompressedPublicKey, 'hex'),\n    true\n  );\n  return Buffer.from(compressed).toString('hex');\n};\n\n/** convert jwk to binary encoded private key */\nexport const privateKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PrivateKeyJwk) => {\n  const privateKeyHex = privateKeyHexFromJwk(jwk);\n  return Buffer.from(privateKeyHex, 'hex');\n};\n\n/** convert jwk to binary encoded public key */\nexport const publicKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const publicKeyHex = publicKeyHexFromJwk(jwk);\n  return Buffer.from(publicKeyHex, 'hex');\n};\n\n/** convert publicKeyHex to base58 */\nexport const publicKeyBase58FromPublicKeyHex = (publicKeyHex: string) => {\n  return bs58.encode(Buffer.from(publicKeyHex, 'hex'));\n};\n\n/** convert publicKeyHex to base58 */\nexport const privateKeyBase58FromPrivateKeyHex = (privateKeyHex: string) => {\n  return bs58.encode(Buffer.from(privateKeyHex, 'hex'));\n};\n\nexport const privateKeyUInt8ArrayFromPrivateKeyBase58 = (\n  privateKeyBase58: string\n) => {\n  return bs58.decode(privateKeyBase58);\n};\n\nexport const publicKeyUInt8ArrayFromPublicKeyBase58 = (\n  publicKeyBase58: string\n) => {\n  return bs58.decode(publicKeyBase58);\n};\n\nexport const publicKeyHexFromPrivateKeyHex = (privateKeyHex: string) => {\n  const publicKey = secp256k1.publicKeyCreate(\n    new Uint8Array(Buffer.from(privateKeyHex, 'hex'))\n  );\n  return Buffer.from(publicKey).toString('hex');\n};\n","import base64url from 'base64url';\n\nimport crypto from 'crypto';\nimport secp256k1 from 'secp256k1';\n\nimport {\n  ISecp256k1PrivateKeyJwk,\n  ISecp256k1PublicKeyJwk,\n  privateKeyUInt8ArrayFromJwk,\n  publicKeyUInt8ArrayFromJwk,\n} from './keyUtils';\n\n/** error matching @panva/jose for JWS verification failure. */\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\n/** JWS Header */\nexport interface IJWSHeader {\n  /** algorithm, ES256K */\n  alg: string;\n\n  /** type, JWT */\n  typ?: string;\n  /** signing key id, ... */\n  kid?: string;\n}\n\n/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const signDetached = async (\n  // in the case of EcdsaSecp256k1Signature2019 this is the result of createVerifyData\n  payload: Buffer,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header = {\n    alg: 'ES256K',\n    b64: false,\n    crit: ['b64'],\n  }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  const message = Buffer.from(toBeSignedBuffer);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(Buffer.from(sigObj.signature));\n\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\n/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const verifyDetached = async (\n  jws: string,\n  payload: Buffer,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n) => {\n  if (jws.indexOf('..') === -1) {\n    throw new JWSVerificationFailed('not a valid rfc7797 jws.');\n  }\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const header = JSON.parse(base64url.decode(encodedHeader));\n  if (header.alg !== 'ES256K') {\n    throw new Error('JWS alg is not signed with ES256K.');\n  }\n  if (\n    header.b64 !== false ||\n    !header.crit ||\n    !header.crit.length ||\n    header.crit[0] !== 'b64'\n  ) {\n    throw new Error('JWS Header is not in rfc7797 format (not detached).');\n  }\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const message = Buffer.from(toBeSignedBuffer);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n\n  if (verified) {\n    return true;\n  }\n  const erroObject = {\n    signature: signatureUInt8Array.toString('hex'),\n    // message: messageHashUInt8Array.toString('hex'),\n    // publicKey: publicKeyUInt8Array.toString('hex'),\n  };\n  throw new JWSVerificationFailed(\n    'ECDSA Verify Failed: ' + JSON.stringify(erroObject, null, 2)\n  );\n};\n\n/** Produce a normal ES256K JWS */\nexport const sign = async (\n  payload: any,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header: IJWSHeader = { alg: 'ES256K' }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const encodedPayload = base64url.encode(JSON.stringify(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const message = Buffer.from(toBeSigned);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(sigObj.signature);\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n};\n\n/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */\nexport const verify = async (\n  jws: string,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n) => {\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n\n  const message = Buffer.from(toBeSigned);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n  const erroObject = {\n    signature: signatureUInt8Array.toString('hex'),\n    message: messageHashUInt8Array.toString('hex'),\n    publicKey: publicKeyUInt8Array.toString('hex'),\n  };\n  throw new JWSVerificationFailed(\n    'ECDSA Verify Failed: ' + JSON.stringify(erroObject, null, 2)\n  );\n};\n\n/** decode a JWS (without verifying it) */\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n","import crypto from 'crypto';\n\nimport * as keyUtils from './keyUtils';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport * as common from '@transmute/did-key-common';\n\nconst _generate = (secureRandom: any) => {\n  let privateKey;\n  do {\n    privateKey = secureRandom();\n  } while (!secp256k1.privateKeyVerify(privateKey));\n\n  const publicKey = secp256k1.publicKeyCreate(privateKey);\n  return { publicKey, privateKey };\n};\n\n@common.types.staticImplements<common.types.KeyPairClass>()\nexport class Secp256k1KeyPair {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = new Uint8Array(\n        Buffer.from(\n          keyUtils.publicKeyHexFromJwk(\n            (keypair as common.types.KeyPairJwk).publicKeyJwk\n          )\n        )\n      );\n    }\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    // See https://github.com/multiformats/multicodec/blob/master/table.csv\n    // 0xe7 is Secp256k1 public key\n    buffer[0] = 0xe7; //\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static async generate(options: any = {}) {\n    let privateKey;\n    let publicKey;\n    if (options.secureRandom) {\n      ({ privateKey, publicKey } = _generate(options.secureRandom));\n    }\n\n    if (!privateKey) {\n      throw new Error('Cannot generate private key.');\n    }\n\n    const publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyHex(\n      Buffer.from(publicKey).toString('hex')\n    );\n    const privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n      Buffer.from(privateKey).toString('hex')\n    );\n\n    const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n\n    return new Secp256k1KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    });\n  }\n\n  static async from(options: any) {\n    let privateKeyBase58 = options.privateKeyBase58;\n    let publicKeyBase58 = options.publicKeyBase58;\n\n    if (options.privateKeyHex) {\n      privateKeyBase58 = await keyUtils.privateKeyBase58FromPrivateKeyHex(\n        options.privateKeyHex\n      );\n    }\n\n    if (options.publicKeyHex) {\n      publicKeyBase58 = await keyUtils.publicKeyBase58FromPublicKeyHex(\n        options.publicKeyHex\n      );\n    }\n\n    if (options.privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.privateKeyHexFromJwk(options.privateKeyJwk)\n      );\n    }\n\n    if (options.publicKeyJwk) {\n      publicKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.publicKeyHexFromJwk(options.publicKeyJwk)\n      );\n    }\n\n    return new Secp256k1KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L77\n    if (buffer[0] === 0xe7 && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new Secp256k1KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  constructor(options: any = {}) {\n    this.type = 'EcdsaSecp256k1VerificationKey2019';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from(\n        keyUtils.publicKeyHexFromJwk(options.publicKeyJwk),\n        'hex'\n      );\n    } else {\n      throw new Error(\n        'Secp256k1KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (options.privateKeyJwk) {\n      this.privateKeyBuffer = Buffer.from(\n        keyUtils.privateKeyHexFromJwk(options.privateKeyJwk),\n        'hex'\n      );\n    }\n\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  publicNode() {\n    return this.toKeyPair(false);\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      throw new Error('No private key to sign with.');\n    }\n    let { privateKeyBuffer } = this;\n    return {\n      async sign({ data }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        const sigObj: any = secp256k1.ecdsaSign(\n          messageHashUInt8Array,\n          new Uint8Array(privateKeyBuffer)\n        );\n\n        return sigObj.signature;\n      },\n    };\n  }\n\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      throw new Error('No public key to verify with.');\n    }\n    let { publicKeyBuffer } = this;\n    return {\n      async verify({ data, signature }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        let verified = false;\n        try {\n          verified = secp256k1.ecdsaVerify(\n            signature,\n            messageHashUInt8Array,\n            new Uint8Array(publicKeyBuffer)\n          );\n        } catch (e) {\n          console.error('An error occurred when verifying signature: ', e);\n        }\n        return verified;\n      },\n    };\n  }\n\n  fingerprint() {\n    return Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n\n  verifyFingerprint(fingerprint: string) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n    let { publicKeyBuffer } = this;\n\n    // validate the first two multicodec bytes 0xe701\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'e701' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  toJwk(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyJwkFromPrivateKeyHex(\n        this.privateKeyBuffer.toString('hex')\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyHex(\n      this.publicKeyBuffer.toString('hex')\n    );\n  }\n\n  async toHex(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyHexFromJwk(\n        await keyUtils.privateKeyJwkFromPrivateKeyHex(\n          this.privateKeyBuffer.toString('hex')\n        )\n      );\n    }\n    return keyUtils.publicKeyHexFromJwk(\n      await keyUtils.publicKeyJwkFromPublicKeyHex(\n        this.publicKeyBuffer.toString('hex')\n      )\n    );\n  }\n\n  toKeyPair(exportPrivate = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (exportPrivate) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivate: boolean = false): any {\n    let kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk(),\n    };\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivate) {\n      kp.privateKeyJwk = this.toJwk(true);\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n}\n","import { Secp256k1KeyPair } from './Secp256k1KeyPair';\nimport { getResolve, getGet } from '@transmute/did-key-common';\n\nexport const resolve = getResolve(Secp256k1KeyPair);\nexport const get = getGet(resolve);\n"],"names":["compressedHexEncodedPublicKeyLength","getKid","jwk","copy","d","kid","alg","digest","crypto","createHash","update","canonicalize","base64url","encode","Buffer","from","privateKeyJwkFromPrivateKeyHex","privateKeyHex","keyto","toJwk","crv","publicKeyJwkFromPublicKeyHex","publicKeyHex","key","length","keyBin","secp256k1","publicKeyConvert","toString","privateKeyJwkFromPrivateKeyPem","privateKeyPem","publicKeyJwkFromPublicKeyPem","publicKeyPem","privateKeyHexFromJwk","publicKeyHexFromJwk","uncompressedPublicKey","compressed","privateKeyUInt8ArrayFromJwk","publicKeyUInt8ArrayFromJwk","publicKeyBase58FromPublicKeyHex","bs58","privateKeyBase58FromPrivateKeyHex","privateKeyUInt8ArrayFromPrivateKeyBase58","privateKeyBase58","decode","publicKeyUInt8ArrayFromPublicKeyBase58","publicKeyBase58","publicKeyHexFromPrivateKeyHex","publicKey","publicKeyCreate","Uint8Array","JWSVerificationFailed","message","name","Error","signDetached","payload","privateKeyJwk","header","b64","crit","privateKeyUInt8Array","encodedHeader","JSON","stringify","toBeSignedBuffer","concat","buffer","byteOffset","messageHashUInt8Array","sigObj","ecdsaSign","encodedSignature","signature","verifyDetached","jws","publicKeyJwk","indexOf","split","parse","publicKeyUInt8Array","signatureUInt8Array","toBuffer","signatureLowerS","signatureNormalize","verified","ecdsaVerify","erroObject","sign","encodedPayload","toBeSigned","verify","options","complete","_generate","secureRandom","privateKey","privateKeyVerify","Secp256k1KeyPair","type","id","controller","publicKeyBuffer","keyUtils","privateKeyBuffer","fingerprint","fingerprintFromPublicKey","keypair","pubkeyBytes","set","generate","did","Secp256k1KeyPair_1","keyId","fromFingerprint","substr","slice","publicNode","toKeyPair","signer","data","verifier","e","console","error","verifyFingerprint","valid","fingerprintBuffer","equals","_private","toHex","exportPrivate","kp","toJsonWebKeyPair","common","staticImplements","resolve","getResolve","get","getGet"],"mappings":"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"}