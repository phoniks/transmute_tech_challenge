/// <reference types="node" />
import { ISecp256k1PrivateKeyJwk, ISecp256k1PublicKeyJwk } from './keyUtils';
/** JWS Header */
export interface IJWSHeader {
    /** algorithm, ES256K */
    alg: string;
    /** type, JWT */
    typ?: string;
    /** signing key id, ... */
    kid?: string;
}
/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */
export declare const signDetached: (payload: Buffer, privateKeyJwk: ISecp256k1PrivateKeyJwk, header?: {
    alg: string;
    b64: boolean;
    crit: string[];
}) => Promise<string>;
/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */
export declare const verifyDetached: (jws: string, payload: Buffer, publicKeyJwk: ISecp256k1PublicKeyJwk) => Promise<boolean>;
/** Produce a normal ES256K JWS */
export declare const sign: (payload: any, privateKeyJwk: ISecp256k1PrivateKeyJwk, header?: IJWSHeader) => Promise<string>;
/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */
export declare const verify: (jws: string, publicKeyJwk: ISecp256k1PublicKeyJwk) => Promise<any>;
/** decode a JWS (without verifying it) */
export declare const decode: (jws: string, options?: {
    complete: boolean;
}) => any;
