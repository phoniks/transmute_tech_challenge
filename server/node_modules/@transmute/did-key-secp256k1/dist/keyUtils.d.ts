/// <reference types="node" />
/** Secp256k1 Private Key  */
export interface ISecp256k1PrivateKeyJwk {
    /** key type */
    kty: string;
    /** curve */
    crv: string;
    /** private point */
    d: string;
    /** public point */
    x: string;
    /** public point */
    y: string;
    /** key id */
    kid: string;
}
/** Secp256k1 Public Key  */
export interface ISecp256k1PublicKeyJwk {
    /** key type */
    kty: string;
    /** curve */
    crv: string;
    /** public point */
    x: string;
    /** public point */
    y: string;
    /** key id */
    kid: string;
}
/**
 * Example
 * ```js
 * {
 *  kty: 'EC',
 *  crv: 'secp256k1',
 *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',
 *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',
 *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',
 *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'
 * }
 * ```
 * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on Jwk.
 */
export declare const getKid: (jwk: ISecp256k1PrivateKeyJwk | ISecp256k1PublicKeyJwk) => string;
/** convert compressed hex encoded private key to jwk */
export declare const privateKeyJwkFromPrivateKeyHex: (privateKeyHex: string) => any;
/** convert compressed hex encoded public key to jwk */
export declare const publicKeyJwkFromPublicKeyHex: (publicKeyHex: string) => any;
/** convert pem encoded private key to jwk */
export declare const privateKeyJwkFromPrivateKeyPem: (privateKeyPem: string) => any;
/** convert pem encoded public key to jwk */
export declare const publicKeyJwkFromPublicKeyPem: (publicKeyPem: string) => any;
/** convert jwk to hex encoded private key */
export declare const privateKeyHexFromJwk: (jwk: ISecp256k1PrivateKeyJwk) => any;
/** convert jwk to hex encoded public key */
export declare const publicKeyHexFromJwk: (jwk: ISecp256k1PublicKeyJwk) => string;
/** convert jwk to binary encoded private key */
export declare const privateKeyUInt8ArrayFromJwk: (jwk: ISecp256k1PrivateKeyJwk) => Buffer;
/** convert jwk to binary encoded public key */
export declare const publicKeyUInt8ArrayFromJwk: (jwk: ISecp256k1PublicKeyJwk) => Buffer;
/** convert publicKeyHex to base58 */
export declare const publicKeyBase58FromPublicKeyHex: (publicKeyHex: string) => any;
/** convert publicKeyHex to base58 */
export declare const privateKeyBase58FromPrivateKeyHex: (privateKeyHex: string) => any;
export declare const privateKeyUInt8ArrayFromPrivateKeyBase58: (privateKeyBase58: string) => any;
export declare const publicKeyUInt8ArrayFromPublicKeyBase58: (publicKeyBase58: string) => any;
export declare const publicKeyHexFromPrivateKeyHex: (privateKeyHex: string) => string;
