{"version":3,"file":"did-key-common.cjs.development.js","sources":["../src/types/index.ts","../src/Jws/index.ts","../src/getResolver.ts","../src/getGet.ts"],"sourcesContent":["/* class decorator */\nexport const staticImplements = <T>() => {\n  return <U extends T>(constructor: U) => {\n    return constructor;\n  };\n};\n\nexport * from './JWE_ALG';\nexport * from './JWS_ALG';\n\nexport * from './KeyPairClass';\nexport * from './KeyPairInstance';\nexport * from './KeyAgreementKeyPairClass';\nexport * from './KeyPairGenerateOptions';\nexport * from './EpkResult';\nexport * from './KeyEncryptionKeyFromEphemeralPublicKeyOptions';\nexport * from './KeyEncryptionKeyFromStaticPublicKeyOptions';\nexport * from './DeriveSecretOptions';\n\nexport * from './KeyPairBase';\n\nexport * from './KeyPairJwk';\nexport * from './JsonWebKeyPair';\n\nexport * from './KeyPairBase58';\nexport * from './LinkedDataKeyPair';\n\nexport * from './KeyAgreementKeyPairInstance';\n","import base64url from 'base64url';\nimport canonicalize from 'canonicalize';\n\nexport const createJws = async (signer: any, payload: any, header: object) => {\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const encodedPayload = base64url.encode(canonicalize(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const signature = await signer.sign(Buffer.from(toBeSigned));\n  return `${toBeSigned}.${base64url.encode(Buffer.from(signature))}`;\n};\n\nexport const verifyJws = async (verifier: any, jws: string) => {\n  const [header, payload, signature] = jws.split('.');\n  const toBeVerified = `${header}.${payload}`;\n  const verified = await verifier.verify(\n    Buffer.from(toBeVerified),\n    base64url.toBuffer(signature)\n  );\n\n  return verified;\n};\n\nexport const createDetachedJws = async (\n  signer: any,\n  payload: Buffer,\n  header: object\n) => {\n  const encodedHeader = base64url.encode(\n    canonicalize({ ...header, b64: false, crit: ['b64'] })\n  );\n\n  const toBeSigned = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const signature = await signer.sign(Buffer.from(toBeSigned));\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\nexport const verifyDetachedJws = async (\n  verifier: any,\n  payload: Buffer,\n  signature: string\n) => {\n  const [encodedHeader, encodedSignature] = signature.split('..');\n\n  const toBeVerified = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n\n  const verified = await verifier.verify(\n    Buffer.from(toBeVerified),\n    base64url.toBuffer(encodedSignature)\n  );\n\n  return verified;\n};\n","export const getVerificationMethod = (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  let externalKeyRepresentation;\n  switch (contentType) {\n    case 'application/did+json': {\n      externalKeyRepresentation = didKeyPairInstance.toJsonWebKeyPair();\n      break;\n    }\n    case '*/*':\n    case 'application/did+ld+json': {\n      externalKeyRepresentation = didKeyPairInstance.toKeyPair();\n      break;\n    }\n    default: {\n      throw new Error(\n        'This implementation of did:key does not support: ' + contentType\n      );\n    }\n  }\n  return externalKeyRepresentation;\n};\n\nexport const keyToDidDoc = async (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  const did = `did:key:${didKeyPairInstance.fingerprint()}`;\n  const externalKeyRepresentation = getVerificationMethod(\n    didKeyPairInstance,\n    contentType\n  );\n  let verificationRelationships: any = {\n    verificationMethod: [externalKeyRepresentation],\n  };\n\n  if (didKeyPairInstance.verifier) {\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [externalKeyRepresentation.id],\n      assertionMethod: [externalKeyRepresentation.id],\n      capabilityInvocation: [externalKeyRepresentation.id],\n      capabilityDelegation: [externalKeyRepresentation.id],\n    };\n  }\n\n  if (didKeyPairInstance.deriveSecret) {\n    verificationRelationships = {\n      ...verificationRelationships,\n      keyAgreement: [externalKeyRepresentation.id],\n    };\n  }\n\n  if (didKeyPairInstance.type === 'Ed25519VerificationKey2018') {\n    const kek = await didKeyPairInstance.toX25519KeyPair(false);\n    const externalKeyRepresentation2 = getVerificationMethod(kek, contentType);\n    verificationRelationships = {\n      ...verificationRelationships,\n      verificationMethod: [\n        ...verificationRelationships.verificationMethod,\n        externalKeyRepresentation2,\n      ],\n      keyAgreement: [externalKeyRepresentation2.id],\n    };\n  }\n\n  // imagine if people injected ads like this....\n  // verificationRelationships = {\n  //   ...verificationRelationships,\n  //   service: [\n  //     {\n  //       id: '#provider',\n  //       type: 'ServiceProvider',\n  //       serviceEndpoint: 'https://transmute.industries',\n  //     },\n  //   ],\n  // };\n\n  const didDocument = {\n    '@context': [\n      'https://www.w3.org/ns/did/v1',\n      {\n        '@base': did,\n      },\n    ],\n    id: did,\n    ...verificationRelationships,\n  };\n\n  // Here is were I would delete a property for JSON-only\n  // If I wanted to conform to the DID Core JSON Production Rules.\n  return didDocument;\n};\n\n// resolve ( did, did-resolution-input-metadata )\n//      -> ( did-resolution-metadata, did-document, did-document-metadata )\nexport const getResolve = (DidKeyPairClass: any) => {\n  const resolve = async (\n    didUri: string,\n    resolutionMetaData: any = { accept: 'application/did+ld+json' }\n  ) => {\n    const fingerprint = didUri\n      .split('#')[0]\n      .split('did:key:')\n      .pop();\n    const publicKey = await DidKeyPairClass.fromFingerprint({ fingerprint });\n    return {\n      didDocument: await keyToDidDoc(publicKey, resolutionMetaData.accept),\n      didDocumentMetaData: {\n        'content-type': resolutionMetaData.accept,\n      },\n      didResolutionMetaData: {},\n    };\n  };\n  return resolve;\n};\n","export const getGet = (resolve: any) => {\n  const get = async ({ did, url }: any = {}) => {\n    did = did || url;\n    if (!did) {\n      throw new TypeError('\"did\" must be a string.');\n    }\n    const result = await resolve(did);\n    return result.didDocument;\n  };\n  return get;\n};\n"],"names":["staticImplements","constructor","createJws","signer","payload","header","encodedHeader","base64url","encode","canonicalize","encodedPayload","toBeSigned","sign","Buffer","from","signature","verifyJws","verifier","jws","split","toBeVerified","verify","toBuffer","createDetachedJws","b64","crit","Uint8Array","concat","encodedSignature","verifyDetachedJws","getVerificationMethod","didKeyPairInstance","contentType","externalKeyRepresentation","toJsonWebKeyPair","toKeyPair","Error","keyToDidDoc","didDocument","did","id","verificationRelationships","fingerprint","verificationMethod","authentication","assertionMethod","capabilityInvocation","capabilityDelegation","deriveSecret","keyAgreement","type","toX25519KeyPair","kek","externalKeyRepresentation2","getResolve","DidKeyPairClass","resolve","didUri","resolutionMetaData","accept","pop","fromFingerprint","publicKey","didDocumentMetaData","didResolutionMetaData","getGet","get","url","TypeError","result"],"mappings":"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"}