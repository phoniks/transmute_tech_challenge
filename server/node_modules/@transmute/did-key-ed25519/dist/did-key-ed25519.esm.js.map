{"version":3,"file":"did-key-ed25519.esm.js","sources":["../src/EdDSA.ts","../src/keyUtils.ts","../src/Ed25519KeyPair.ts","../src/driver.ts"],"sourcesContent":["import base64url from 'base64url';\n\nimport * as ed25519 from '@stablelib/ed25519';\n\nimport canonicalize from 'canonicalize';\n\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\nconst _jwkToSecretKey = (jwk: any) => {\n  const d = base64url.toBuffer(jwk.d);\n  const x = base64url.toBuffer(jwk.x);\n  const secretKey = new Uint8Array(Buffer.concat([d, x]));\n  return secretKey;\n};\n\nconst _jwkToPublicKey = (jwk: any) => {\n  const x = base64url.toBuffer(jwk.x);\n  const publicKey = new Uint8Array(x);\n  return publicKey;\n};\n\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n\nexport const sign = (\n  payload: any,\n  privateKeyJwk: any,\n  header: any = {\n    alg: 'EdDSA',\n  }\n) => {\n  const secretKey = _jwkToSecretKey(privateKeyJwk);\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const encodedPayload = base64url.encode(canonicalize(payload));\n  const message = new Uint8Array(\n    Buffer.from(`${encodedHeader}.${encodedPayload}`)\n  );\n  const signature = ed25519.sign(secretKey, message);\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  const jws = `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n  return jws;\n};\n\nexport const signDetached = (\n  payload: Buffer,\n  privateKeyJwk: any,\n  header: any = {\n    alg: 'EdDSA',\n  }\n) => {\n  const secretKey = _jwkToSecretKey(privateKeyJwk);\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const message = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const signature = ed25519.sign(secretKey, message);\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  const jws = `${encodedHeader}..${encodedSignature}`;\n  return jws;\n};\n\nexport const verify = (jws: string, publicKeyJwk: any) => {\n  const publicKey = _jwkToPublicKey(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  const message = new Uint8Array(\n    Buffer.from(`${encodedHeader}.${encodedPayload}`)\n  );\n  const verified = ed25519.verify(\n    publicKey,\n    message,\n    new Uint8Array(base64url.toBuffer(encodedSignature))\n  );\n\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n\n  throw new JWSVerificationFailed('signature verification failed');\n};\n\nexport const verifyDetached = (\n  jws: string,\n  payload: Buffer,\n  publicKeyJwk: any\n) => {\n  const publicKey = _jwkToPublicKey(publicKeyJwk);\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const message = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const verified = ed25519.verify(\n    publicKey,\n    message,\n    new Uint8Array(base64url.toBuffer(encodedSignature))\n  );\n  return verified;\n};\n\nexport default {\n  decode,\n\n  sign,\n  signDetached,\n\n  verify,\n  verifyDetached,\n};\n","// https://github.com/transmute-industries/json-ld-sig-detached-jws/blob/master/src/utils.js\nimport bs58 from 'bs58';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\nimport canonicalize from 'canonicalize';\n\nexport const getKid = (jwk: any) => {\n  const copy = { ...jwk } as any;\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  const digest = crypto\n    .createHash('sha256')\n    .update(canonicalize(copy))\n    .digest();\n  return base64url.encode(Buffer.from(digest));\n};\n\nexport const publicKeyBase58FromPublicKeyHex = (publicKeyHex: string) => {\n  return bs58.encode(Buffer.from(publicKeyHex, 'hex'));\n};\n\nexport const privateKeyBase58FromPrivateKeyHex = (privateKeyHex: string) => {\n  return bs58.encode(Buffer.from(privateKeyHex, 'hex'));\n};\n\nexport const publicKeyJwkFromPublicKeyBase58 = (publicKeyBase58: string) => {\n  const jwk = {\n    crv: 'Ed25519',\n    x: base64url.encode(bs58.decode(publicKeyBase58)),\n    kty: 'OKP',\n  };\n  const kid = getKid(jwk);\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\nexport const privateKeyJwkFromPrivateKeyBase58 = (privateKeyBase58: string) => {\n  const privateKeyBuf = bs58.decode(privateKeyBase58);\n  const jwk = {\n    crv: 'Ed25519',\n    d: base64url.encode(privateKeyBuf.slice(0, 32)),\n    x: base64url.encode(privateKeyBuf.slice(32, 64)),\n    kty: 'OKP',\n  };\n  const kid = getKid(jwk);\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\nexport const publicKeyBase58FromPublicKeyJwk = (publicKeyJwk: any) => {\n  return bs58.encode(base64url.toBuffer(publicKeyJwk.x));\n};\n\nexport const privateKeyBase58FromPrivateKeyJwk = (privateKeyJwk: any) => {\n  return bs58.encode(\n    Buffer.concat([\n      base64url.toBuffer(privateKeyJwk.d),\n      base64url.toBuffer(privateKeyJwk.x),\n    ])\n  );\n};\n\nexport const publicKeyHexFromPublicKeyBase58 = (publicKeyBase58: string) => {\n  return bs58.decode(publicKeyBase58).toString('hex');\n};\n\nexport const privateKeyHexFromPrivateKeyBase58 = (privateKeyBase58: string) => {\n  return bs58.decode(privateKeyBase58).toString('hex');\n};\n","import bs58 from 'bs58';\n\nimport * as ed25519 from '@stablelib/ed25519';\nimport * as keyUtils from './keyUtils';\n\nimport * as common from '@transmute/did-key-common';\n\nimport { X25519KeyPair } from '@transmute/did-key-x25519';\n\n@common.types.staticImplements<common.types.KeyPairClass>()\nexport class Ed25519KeyPair {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (keypair as common.types.KeyPairJwk).publicKeyJwk\n        )\n      );\n    }\n    // ed25519 cryptonyms are multicodec encoded values, specifically:\n    // (multicodec ed25519-pub 0xed01 + key bytes)\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xed;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n  static async generate(options: common.types.KeyPairGenerateOptions) {\n    let key;\n    if (options.secureRandom) {\n      key = ed25519.generateKeyPair({\n        isAvailable: true,\n        randomBytes: options.secureRandom,\n      });\n    } else {\n      throw new Error('options.secureRandom is required.');\n    }\n\n    const publicKeyBase58 = bs58.encode(key.publicKey);\n    const privateKeyBase58 = bs58.encode(key.secretKey);\n\n    const did = `did:key:${Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    return new Ed25519KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    });\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L81\n    if (buffer[0] === 0xed && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${Ed25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${Ed25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new Ed25519KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n  // todo: consider moving this type conversion cancer to common.\n  static from(options: common.types.KeyPairBase58 | common.types.KeyPairJwk) {\n    let privateKeyBase58;\n    let publicKeyBase58;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      publicKeyBase58 = (options as common.types.KeyPairBase58).publicKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      privateKeyBase58 = (options as common.types.KeyPairBase58)\n        .privateKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairJwk).privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyJwk(\n        (options as common.types.KeyPairJwk).privateKeyJwk\n      );\n    }\n\n    if ((options as common.types.KeyPairJwk).publicKeyJwk) {\n      publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyJwk(\n        (options as common.types.KeyPairJwk).publicKeyJwk\n      );\n    }\n\n    return new Ed25519KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  constructor(options: any = {}) {\n    this.type = 'Ed25519VerificationKey2018';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(options.publicKeyJwk)\n      );\n    } else {\n      throw new Error(\n        'Ed25519KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  publicNode() {\n    return this.toKeyPair(false);\n  }\n\n  fingerprint() {\n    return Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n  verifyFingerprint(fingerprint: any) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n\n    // validate the first two multicodec bytes 0xed01\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'ed01' &&\n      this.publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  async toJwk(exportPrivateKey: boolean = false) {\n    if (exportPrivateKey) {\n      return keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        bs58.encode(this.privateKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyBase58(\n      bs58.encode(this.publicKeyBuffer)\n    );\n  }\n\n  toX25519KeyPair(exportPrivateKey: boolean = false) {\n    if (exportPrivateKey) {\n      return X25519KeyPair.fromEdKeyPair({\n        controller: this.controller,\n        publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n        privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n      } as any);\n    } else {\n      return X25519KeyPair.fromEdKeyPair({\n        controller: this.controller,\n        publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      } as any);\n    }\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: keyUtils.publicKeyJwkFromPublicKeyBase58(\n        bs58.encode(this.publicKeyBuffer)\n      ),\n    };\n\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivateKey) {\n      kp.privateKeyJwk = keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        bs58.encode(this.privateKeyBuffer)\n      );\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      throw new Error('No private key to sign with.');\n    }\n    let { privateKeyBuffer } = this;\n    return {\n      async sign({ data }: any) {\n        const signatureUInt8Array = ed25519.sign(privateKeyBuffer, data);\n        return signatureUInt8Array;\n      },\n    };\n  }\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      throw new Error('No public key to verify with.');\n    }\n    let { publicKeyBuffer } = this;\n    return {\n      async verify({ data, signature }: any) {\n        let verified = false;\n        try {\n          verified = ed25519.verify(publicKeyBuffer, data, signature);\n        } catch (e) {\n          console.error('An error occurred when verifying signature: ', e);\n        }\n        return verified;\n      },\n    };\n  }\n}\n","import { getResolve, getGet } from '@transmute/did-key-common';\n\nimport { Ed25519KeyPair } from './Ed25519KeyPair';\n\nexport const resolve = getResolve(Ed25519KeyPair);\nexport const get = getGet(resolve);\n"],"names":["JWSVerificationFailed","message","name","Error","_jwkToSecretKey","jwk","d","base64url","toBuffer","x","secretKey","Uint8Array","Buffer","concat","_jwkToPublicKey","publicKey","decode","jws","options","complete","split","encodedHeader","encodedPayload","encodedSignature","header","JSON","parse","payload","signature","sign","privateKeyJwk","alg","encode","canonicalize","from","ed25519","signDetached","verify","publicKeyJwk","verified","verifyDetached","getKid","copy","kid","digest","crypto","createHash","update","publicKeyBase58FromPublicKeyHex","publicKeyHex","bs58","privateKeyBase58FromPrivateKeyHex","privateKeyHex","publicKeyJwkFromPublicKeyBase58","publicKeyBase58","crv","kty","privateKeyJwkFromPrivateKeyBase58","privateKeyBase58","privateKeyBuf","slice","publicKeyBase58FromPublicKeyJwk","privateKeyBase58FromPrivateKeyJwk","publicKeyHexFromPublicKeyBase58","toString","privateKeyHexFromPrivateKeyBase58","Ed25519KeyPair","type","id","controller","publicKeyBuffer","keyUtils","privateKeyBuffer","fingerprint","fingerprintFromPublicKey","keypair","pubkeyBytes","buffer","length","set","generate","key","secureRandom","isAvailable","randomBytes","did","Ed25519KeyPair_1","keyId","fromFingerprint","substr","publicNode","toKeyPair","verifyFingerprint","error","valid","fingerprintBuffer","e","equals","toJwk","exportPrivateKey","toX25519KeyPair","X25519KeyPair","fromEdKeyPair","kp","toJsonWebKeyPair","signer","data","signatureUInt8Array","verifier","console","common","staticImplements","resolve","getResolve","get","getGet"],"mappings":"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"}