{"version":3,"file":"server.cjs.production.min.js","sources":["../src/utils/config.ts","../src/controllers/ethereum.ts","../src/controllers/sidetree.ts","../src/controllers/ipfs.ts","../src/index.ts"],"sourcesContent":["import * as dotenv from \"dotenv\";\n\ndotenv.config();\nlet path;\nswitch (process.env.NODE_ENV) {\n  case \"test\":\n    path = `${__dirname}/../../.env.test`;\n    break;\n  case \"production\":\n    path = `${__dirname}/../../.env.production`;\n    break;\n  default:\n    path = `${__dirname}/../.env`;\n}\ndotenv.config({ path: path });\n\nexport const APP_ID = process.env.APP_ID;\nexport const LOG_LEVEL = process.env.LOG_LEVEL;\n\nexport const ELEMENT_PROVIDER = \"http://127.0.0.1:8545\"\nexport const ELEMENT_IPFS_MULTIADDR = process.env.ELEMENT_IPFS_MULTIADDR\nexport const ELEMENT_CONTRACT_ADDRESS = \"0x74435D1c1018798243d201B5f4e6187c62562E72\"\nexport const DATABASE_URL = 'mongodb://localhost:27017/element-test'\nexport const DATABASE_NAME = \"element-test\"\nexport const SESSION_SECRET = \"379tE844LHttpRe1395entTa3243entTa16219lidRespons8\"\nexport const MNEMONIC = \"proud ancient burger emotion verify salad mandate work pizza daughter live section\"","import { EthereumLedger } from '@sidetree/ethereum'\nimport { ELEMENT_CONTRACT_ADDRESS, ELEMENT_PROVIDER } from '../utils/config'\nimport web3 from 'web3'\nconst Web3 = new web3(new web3.providers.HttpProvider(ELEMENT_PROVIDER))\n\nconst Ethereum = new EthereumLedger(Web3, ELEMENT_CONTRACT_ADDRESS)\nEthereum.initialize()\n\nexport { Ethereum as blockchain }\n","import {Element} from '@sidetree/element'\nimport { blockchain } from './ethereum'\nconst config = {\n    batchingIntervalInSeconds: 360,\n    contentAddressableStoreServiceUri: '', \n    didMethodName: 'elem:ropsten', \n    maxConcurrentDownloads:    1 ,\n    observingIntervalInSeconds: 360,\n    mongoDbConnectionString: \"mongodb://localhost:27017/\", \n    databaseName: 'element-test',\n}\nconst protocolVersions:any = []\n\nconsole.log(blockchain)\nconst sidetree = new Element(config, protocolVersions, blockchain )\n\nsidetree.initialize() \n\nconst operations = sidetree.handleOperationRequest\nconst readDID = sidetree.handleResolveRequest\nconst getSideTreeVersion = sidetree.handleGetVersionRequest\n\nexport { operations, readDID, getSideTreeVersion }","import {IpfsCasWithCache} from '@sidetree/cas'\nconst IpfsAddress = process.env.ELEMENT_IPFS_MULTIADDR ? process.env.ELEMENT_IPFS_MULTIADDR : \"IPFS_ADDY\"\nimport {DATABASE_URL, DATABASE_NAME} from '../utils/config'\n\nconst Cas = new IpfsCasWithCache(IpfsAddress, DATABASE_URL!, DATABASE_NAME)\nCas.initialize()\nexport { Cas as cas} ","import express from 'express'\nimport session from 'express-session'\nimport bodyParser from 'body-parser'\nimport flash from 'express-flash'\nimport mongo from 'connect-mongo'\nimport path from 'path'\nimport { operations, readDID, getSideTreeVersion } from './controllers/sidetree'\nimport { blockchain } from './controllers/ethereum'\nimport { cas } from './controllers/ipfs'\nimport {DATABASE_URL} from './utils/config'\n\n\nconst appServer = () => {}\nconst secret = process.env.SESSION_SECRET ? process.env.SESSION_SECRET : 'somesecretthingthatyoushouldntshare'\nconst MongoStore = mongo(session);\nconst app = express();\napp.set(\"port\", process.env.PORT || 3000);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(session({\n    resave: true,\n    saveUninitialized: true,\n    secret: secret,\n    store: new MongoStore({\n        url: DATABASE_URL!,\n        autoReconnect: true\n    }) \n}));\n\napp.use(flash());\n\napp.use(\n    express.static(path.join(__dirname, \"public\"), { maxAge: 31557600000 })\n);\n\n/**\n * Primary app route.\n */\napp.get(\"/\", appServer)\n\n\n/**\n * Sidetree API.\n */\napp.post(\"/operations\", operations);\napp.get(\"/identifiers/:did\", readDID)\napp.get(\"/version\", getSideTreeVersion);\n\n/**\n * Blockchain API.\n */\napp.get(\"/blockchain/time\", blockchain.getLatestTime);\napp.get(\"​/blockchain​/time​/:time-hash\", blockchain.getLatestTime);\napp.get(\"/blockchain​/transactions\", (req) => {\n    const transaction = req.body\n    blockchain._getTransactions(transaction.startBlock, transaction.endBlock)\n});\napp.post(\"/blockchain/transactions\", (req) => {\n    blockchain.write(req.body.anchorString, req.body._fee)\n});\napp.post(\"/blockchain/transactions/first-valid\", blockchain.getFirstValidTransaction);\napp.get(\"/blockchain/fee\", blockchain.getFee);\napp.get(\"/blockchain/locks/:lock-identifier\", blockchain.getValueTimeLock);\napp.get(\"/blockchain/writer-lock\", blockchain.getWriterValueTimeLock);\napp.post(\"/blockchain/version\", blockchain.getServiceVersion);\n/**\n * CAS API.\n */\napp.post(\"/cas\", cas.write);\napp.get(\"/cas/version\", cas.getServiceVersion)\napp.get(\"/cas/:hash\", cas.write)\n\nexport default app;\n\napp.listen(3000)\nconsole.log('api listening on port 3000')"],"names":["path","dotenv","__dirname","process","DATABASE_URL","Ethereum","EthereumLedger","web3","providers","HttpProvider","initialize","config","batchingIntervalInSeconds","contentAddressableStoreServiceUri","didMethodName","maxConcurrentDownloads","observingIntervalInSeconds","mongoDbConnectionString","databaseName","protocolVersions","console","log","blockchain","sidetree","Element","operations","handleOperationRequest","readDID","handleResolveRequest","getSideTreeVersion","handleGetVersionRequest","IpfsAddress","env","ELEMENT_IPFS_MULTIADDR","Cas","IpfsCasWithCache","secret","SESSION_SECRET","MongoStore","mongo","session","app","express","set","PORT","use","bodyParser","json","urlencoded","extended","resave","saveUninitialized","store","url","autoReconnect","flash","join","maxAge","get","post","getLatestTime","req","transaction","body","_getTransactions","startBlock","endBlock","write","anchorString","_fee","getFirstValidTransaction","getFee","getValueTimeLock","getWriterValueTimeLock","getServiceVersion","cas","listen"],"mappings":"8IAGIA,0SADJC,WAOID,EAAUE,mCAKdD,SAAc,CAAED,KAAMA,IAEAG,QACGA,QAGaA,QAJ/B,IAMMC,EAAe,yCCjBtBC,EAAW,IAAIC,iBAFR,IAAIC,EAAK,IAAIA,EAAKC,UAAUC,aDgBT,0BAEQ,8CCfxCJ,EAASK,aCJT,IAAMC,EAAS,CACXC,0BAA2B,IAC3BC,kCAAmC,GACnCC,cAAe,eACfC,uBAA2B,EAC3BC,2BAA4B,IAC5BC,wBAAyB,6BACzBC,aAAc,gBAEZC,EAAuB,GAE7BC,QAAQC,IAAIC,GACZ,IAAMC,EAAW,IAAIC,UAAQb,EAAQQ,EAAkBG,GAEvDC,EAASb,aAET,IAAMe,EAAaF,EAASG,uBACtBC,EAAUJ,EAASK,qBACnBC,EAAqBN,EAASO,wBCnB9BC,EAAc5B,QAAQ6B,IAAIC,uBAAyB9B,QAAQ6B,IAAIC,uBAAyB,YAGxFC,EAAM,IAAIC,mBAAiBJ,EAAa3B,EHmBjB,gBGlB7B8B,EAAIxB,aCOJ,IACM0B,EAASjC,QAAQ6B,IAAIK,eAAiBlC,QAAQ6B,IAAIK,eAAiB,sCACnEC,EAAaC,EAAMC,GACnBC,EAAMC,IACZD,EAAIE,IAAI,OAAQxC,QAAQ6B,IAAIY,MAAQ,KACpCH,EAAII,IAAIC,EAAWC,QACnBN,EAAII,IAAIC,EAAWE,WAAW,CAAEC,UAAU,KAC1CR,EAAII,IAAIL,EAAQ,CACZU,QAAQ,EACRC,mBAAmB,EACnBf,OAAQA,EACRgB,MAAO,IAAId,EAAW,CAClBe,IAAKjD,EACLkD,eAAe,OAIvBb,EAAII,IAAIU,KAERd,EAAII,IACAH,SAAe1C,EAAKwD,KAAKtD,UAAW,UAAW,CAAEuD,OAAQ,YAM7DhB,EAAIiB,IAAI,KA1BU,eAgClBjB,EAAIkB,KAAK,cAAelC,GACxBgB,EAAIiB,IAAI,oBAAqB/B,GAC7Bc,EAAIiB,IAAI,WAAY7B,GAKpBY,EAAIiB,IAAI,mBAAoBpC,EAAWsC,eACvCnB,EAAIiB,IAAI,iCAAkCpC,EAAWsC,eACrDnB,EAAIiB,IAAI,6BAA6B,SAACG,OAC5BC,EAAcD,EAAIE,KACxBzC,EAAW0C,iBAAiBF,EAAYG,WAAYH,EAAYI,aAEpEzB,EAAIkB,KAAK,4BAA4B,SAACE,GAClCvC,EAAW6C,MAAMN,EAAIE,KAAKK,aAAcP,EAAIE,KAAKM,SAErD5B,EAAIkB,KAAK,uCAAwCrC,EAAWgD,0BAC5D7B,EAAIiB,IAAI,kBAAmBpC,EAAWiD,QACtC9B,EAAIiB,IAAI,qCAAsCpC,EAAWkD,kBACzD/B,EAAIiB,IAAI,0BAA2BpC,EAAWmD,wBAC9ChC,EAAIkB,KAAK,sBAAuBrC,EAAWoD,mBAI3CjC,EAAIkB,KAAK,OAAQgB,EAAIR,OACrB1B,EAAIiB,IAAI,eAAgBiB,EAAID,mBAC5BjC,EAAIiB,IAAI,aAAciB,EAAIR,OAI1B1B,EAAImC,OAAO,KACXxD,QAAQC,IAAI"}